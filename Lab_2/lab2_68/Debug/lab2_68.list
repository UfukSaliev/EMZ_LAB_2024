
lab2_68.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004234  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004414  08004414  00005414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044cc  080044cc  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080044cc  080044cc  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044cc  080044cc  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044cc  080044cc  000054cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044d0  080044d0  000054d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080044d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001980  20000010  080044e4  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001990  080044e4  00006990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e689  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c9  00000000  00000000  000146c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00016d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5d  00000000  00000000  00017b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002768  00000000  00000000  000185b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0c4  00000000  00000000  0001ad1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec8a1  00000000  00000000  00028de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115682  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000376c  00000000  00000000  001156c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00118e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	080043fc 	.word	0x080043fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	080043fc 	.word	0x080043fc

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa4b 	bl	80006be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f832 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f870 	bl	8000310 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f001 fb2a 	bl	8001888 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000234:	4a0d      	ldr	r2, [pc, #52]	@ (800026c <main+0x4c>)
 8000236:	2100      	movs	r1, #0
 8000238:	480d      	ldr	r0, [pc, #52]	@ (8000270 <main+0x50>)
 800023a:	f001 fb6f 	bl	800191c <osThreadNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a0c      	ldr	r2, [pc, #48]	@ (8000274 <main+0x54>)
 8000242:	6013      	str	r3, [r2, #0]

  /* creation of input_task */
  input_taskHandle = osThreadNew(inputTask, NULL, &input_task_attributes);
 8000244:	4a0c      	ldr	r2, [pc, #48]	@ (8000278 <main+0x58>)
 8000246:	2100      	movs	r1, #0
 8000248:	480c      	ldr	r0, [pc, #48]	@ (800027c <main+0x5c>)
 800024a:	f001 fb67 	bl	800191c <osThreadNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a0b      	ldr	r2, [pc, #44]	@ (8000280 <main+0x60>)
 8000252:	6013      	str	r3, [r2, #0]

  /* creation of output_task */
  output_taskHandle = osThreadNew(outputTask, NULL, &output_task_attributes);
 8000254:	4a0b      	ldr	r2, [pc, #44]	@ (8000284 <main+0x64>)
 8000256:	2100      	movs	r1, #0
 8000258:	480b      	ldr	r0, [pc, #44]	@ (8000288 <main+0x68>)
 800025a:	f001 fb5f 	bl	800191c <osThreadNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a0a      	ldr	r2, [pc, #40]	@ (800028c <main+0x6c>)
 8000262:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000264:	f001 fb34 	bl	80018d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000268:	bf00      	nop
 800026a:	e7fd      	b.n	8000268 <main+0x48>
 800026c:	08004450 	.word	0x08004450
 8000270:	080003e5 	.word	0x080003e5
 8000274:	2000002c 	.word	0x2000002c
 8000278:	08004474 	.word	0x08004474
 800027c:	080003f5 	.word	0x080003f5
 8000280:	20000030 	.word	0x20000030
 8000284:	08004498 	.word	0x08004498
 8000288:	08000465 	.word	0x08000465
 800028c:	20000034 	.word	0x20000034

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b094      	sub	sp, #80	@ 0x50
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	2238      	movs	r2, #56	@ 0x38
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f004 f872 	bl	8004388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002b6:	f000 fd09 	bl	8000ccc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ba:	2302      	movs	r3, #2
 80002bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c4:	2340      	movs	r3, #64	@ 0x40
 80002c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c8:	2300      	movs	r3, #0
 80002ca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 0318 	add.w	r3, r7, #24
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fdaf 	bl	8000e34 <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002dc:	f000 f95c 	bl	8000598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e4:	2301      	movs	r3, #1
 80002e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 f8ad 	bl	8001458 <HAL_RCC_ClockConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000304:	f000 f948 	bl	8000598 <Error_Handler>
  }
}
 8000308:	bf00      	nop
 800030a:	3750      	adds	r7, #80	@ 0x50
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000326:	4b2b      	ldr	r3, [pc, #172]	@ (80003d4 <MX_GPIO_Init+0xc4>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800032a:	4a2a      	ldr	r2, [pc, #168]	@ (80003d4 <MX_GPIO_Init+0xc4>)
 800032c:	f043 0302 	orr.w	r3, r3, #2
 8000330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000332:	4b28      	ldr	r3, [pc, #160]	@ (80003d4 <MX_GPIO_Init+0xc4>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000336:	f003 0302 	and.w	r3, r3, #2
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033e:	4b25      	ldr	r3, [pc, #148]	@ (80003d4 <MX_GPIO_Init+0xc4>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000342:	4a24      	ldr	r2, [pc, #144]	@ (80003d4 <MX_GPIO_Init+0xc4>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800034a:	4b22      	ldr	r3, [pc, #136]	@ (80003d4 <MX_GPIO_Init+0xc4>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800034e:	f003 0304 	and.w	r3, r3, #4
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000356:	4b1f      	ldr	r3, [pc, #124]	@ (80003d4 <MX_GPIO_Init+0xc4>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800035a:	4a1e      	ldr	r2, [pc, #120]	@ (80003d4 <MX_GPIO_Init+0xc4>)
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000362:	4b1c      	ldr	r3, [pc, #112]	@ (80003d4 <MX_GPIO_Init+0xc4>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000366:	f003 0308 	and.w	r3, r3, #8
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, InB2_Pin|InB1_Pin|InA2_Pin|InA1_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	f24e 0102 	movw	r1, #57346	@ 0xe002
 8000374:	4818      	ldr	r0, [pc, #96]	@ (80003d8 <MX_GPIO_Init+0xc8>)
 8000376:	f000 fc91 	bl	8000c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : InB2_Pin InB1_Pin InA2_Pin InA1_Pin */
  GPIO_InitStruct.Pin = InB2_Pin|InB1_Pin|InA2_Pin|InA1_Pin;
 800037a:	f24e 0302 	movw	r3, #57346	@ 0xe002
 800037e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000380:	2301      	movs	r3, #1
 8000382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	2300      	movs	r3, #0
 800038a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800038c:	f107 030c 	add.w	r3, r7, #12
 8000390:	4619      	mov	r1, r3
 8000392:	4811      	ldr	r0, [pc, #68]	@ (80003d8 <MX_GPIO_Init+0xc8>)
 8000394:	f000 fae8 	bl	8000968 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button3_Pin Button4_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button3_Pin|Button4_Pin;
 8000398:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800039c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003a2:	2301      	movs	r3, #1
 80003a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003a6:	f107 030c 	add.w	r3, r7, #12
 80003aa:	4619      	mov	r1, r3
 80003ac:	480b      	ldr	r0, [pc, #44]	@ (80003dc <MX_GPIO_Init+0xcc>)
 80003ae:	f000 fadb 	bl	8000968 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 80003b2:	2304      	movs	r3, #4
 80003b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003ba:	2301      	movs	r3, #1
 80003bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80003be:	f107 030c 	add.w	r3, r7, #12
 80003c2:	4619      	mov	r1, r3
 80003c4:	4806      	ldr	r0, [pc, #24]	@ (80003e0 <MX_GPIO_Init+0xd0>)
 80003c6:	f000 facf 	bl	8000968 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ca:	bf00      	nop
 80003cc:	3720      	adds	r7, #32
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	48000400 	.word	0x48000400
 80003dc:	48000800 	.word	0x48000800
 80003e0:	48000c00 	.word	0x48000c00

080003e4 <StartDefaultTask>:
    uint8_t button3State = 0;
    uint8_t button4State = 0;

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003ec:	2001      	movs	r0, #1
 80003ee:	f001 fb27 	bl	8001a40 <osDelay>
 80003f2:	e7fb      	b.n	80003ec <StartDefaultTask+0x8>

080003f4 <inputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_inputTask */
void inputTask(void *argument)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN inputTask */
  /* Infinite loop */
  for(;;)
  {
	  button1State = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80003fc:	2104      	movs	r1, #4
 80003fe:	4813      	ldr	r0, [pc, #76]	@ (800044c <inputTask+0x58>)
 8000400:	f000 fc34 	bl	8000c6c <HAL_GPIO_ReadPin>
 8000404:	4603      	mov	r3, r0
 8000406:	461a      	mov	r2, r3
 8000408:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <inputTask+0x5c>)
 800040a:	701a      	strb	r2, [r3, #0]
	  button3State = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 800040c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000410:	4810      	ldr	r0, [pc, #64]	@ (8000454 <inputTask+0x60>)
 8000412:	f000 fc2b 	bl	8000c6c <HAL_GPIO_ReadPin>
 8000416:	4603      	mov	r3, r0
 8000418:	461a      	mov	r2, r3
 800041a:	4b0f      	ldr	r3, [pc, #60]	@ (8000458 <inputTask+0x64>)
 800041c:	701a      	strb	r2, [r3, #0]
	  button2State = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 800041e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000422:	480c      	ldr	r0, [pc, #48]	@ (8000454 <inputTask+0x60>)
 8000424:	f000 fc22 	bl	8000c6c <HAL_GPIO_ReadPin>
 8000428:	4603      	mov	r3, r0
 800042a:	461a      	mov	r2, r3
 800042c:	4b0b      	ldr	r3, [pc, #44]	@ (800045c <inputTask+0x68>)
 800042e:	701a      	strb	r2, [r3, #0]
	  button4State = HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 8000430:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000434:	4807      	ldr	r0, [pc, #28]	@ (8000454 <inputTask+0x60>)
 8000436:	f000 fc19 	bl	8000c6c <HAL_GPIO_ReadPin>
 800043a:	4603      	mov	r3, r0
 800043c:	461a      	mov	r2, r3
 800043e:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <inputTask+0x6c>)
 8000440:	701a      	strb	r2, [r3, #0]

    osDelay(10);
 8000442:	200a      	movs	r0, #10
 8000444:	f001 fafc 	bl	8001a40 <osDelay>
	  button1State = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000448:	bf00      	nop
 800044a:	e7d7      	b.n	80003fc <inputTask+0x8>
 800044c:	48000c00 	.word	0x48000c00
 8000450:	20000038 	.word	0x20000038
 8000454:	48000800 	.word	0x48000800
 8000458:	2000003a 	.word	0x2000003a
 800045c:	20000039 	.word	0x20000039
 8000460:	2000003b 	.word	0x2000003b

08000464 <outputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_outputTask */
void outputTask(void *argument)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN outputTask */
  /* Infinite loop */
  for(;;)
  {
      if(button1State == GPIO_PIN_RESET)
 800046c:	4b45      	ldr	r3, [pc, #276]	@ (8000584 <outputTask+0x120>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d117      	bne.n	80004a4 <outputTask+0x40>
      {
    	  HAL_GPIO_WritePin(InB1_GPIO_Port, InB1_Pin, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800047a:	4843      	ldr	r0, [pc, #268]	@ (8000588 <outputTask+0x124>)
 800047c:	f000 fc0e 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InB2_GPIO_Port, InB2_Pin, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	2102      	movs	r1, #2
 8000484:	4840      	ldr	r0, [pc, #256]	@ (8000588 <outputTask+0x124>)
 8000486:	f000 fc09 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InA1_GPIO_Port, InA1_Pin, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000490:	483d      	ldr	r0, [pc, #244]	@ (8000588 <outputTask+0x124>)
 8000492:	f000 fc03 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InA2_GPIO_Port, InA2_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800049c:	483a      	ldr	r0, [pc, #232]	@ (8000588 <outputTask+0x124>)
 800049e:	f000 fbfd 	bl	8000c9c <HAL_GPIO_WritePin>
 80004a2:	e06a      	b.n	800057a <outputTask+0x116>
      }
      else if(button2State == GPIO_PIN_RESET)
 80004a4:	4b39      	ldr	r3, [pc, #228]	@ (800058c <outputTask+0x128>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d117      	bne.n	80004dc <outputTask+0x78>
      {
    	  HAL_GPIO_WritePin(InB1_GPIO_Port, InB1_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004b2:	4835      	ldr	r0, [pc, #212]	@ (8000588 <outputTask+0x124>)
 80004b4:	f000 fbf2 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InB2_GPIO_Port, InB2_Pin, GPIO_PIN_RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2102      	movs	r1, #2
 80004bc:	4832      	ldr	r0, [pc, #200]	@ (8000588 <outputTask+0x124>)
 80004be:	f000 fbed 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InA1_GPIO_Port, InA1_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004c8:	482f      	ldr	r0, [pc, #188]	@ (8000588 <outputTask+0x124>)
 80004ca:	f000 fbe7 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InA2_GPIO_Port, InA2_Pin, GPIO_PIN_SET);
 80004ce:	2201      	movs	r2, #1
 80004d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004d4:	482c      	ldr	r0, [pc, #176]	@ (8000588 <outputTask+0x124>)
 80004d6:	f000 fbe1 	bl	8000c9c <HAL_GPIO_WritePin>
 80004da:	e04e      	b.n	800057a <outputTask+0x116>
      }
      else if(button3State == GPIO_PIN_RESET)
 80004dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000590 <outputTask+0x12c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d117      	bne.n	8000514 <outputTask+0xb0>
      {
    	  HAL_GPIO_WritePin(InB1_GPIO_Port, InB1_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ea:	4827      	ldr	r0, [pc, #156]	@ (8000588 <outputTask+0x124>)
 80004ec:	f000 fbd6 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InB2_GPIO_Port, InB2_Pin, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2102      	movs	r1, #2
 80004f4:	4824      	ldr	r0, [pc, #144]	@ (8000588 <outputTask+0x124>)
 80004f6:	f000 fbd1 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InA1_GPIO_Port, InA1_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000500:	4821      	ldr	r0, [pc, #132]	@ (8000588 <outputTask+0x124>)
 8000502:	f000 fbcb 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InA2_GPIO_Port, InA2_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800050c:	481e      	ldr	r0, [pc, #120]	@ (8000588 <outputTask+0x124>)
 800050e:	f000 fbc5 	bl	8000c9c <HAL_GPIO_WritePin>
 8000512:	e032      	b.n	800057a <outputTask+0x116>
      }
      else if(button4State == GPIO_PIN_RESET)
 8000514:	4b1f      	ldr	r3, [pc, #124]	@ (8000594 <outputTask+0x130>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d117      	bne.n	800054c <outputTask+0xe8>
      {
    	  HAL_GPIO_WritePin(InB1_GPIO_Port, InB1_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000522:	4819      	ldr	r0, [pc, #100]	@ (8000588 <outputTask+0x124>)
 8000524:	f000 fbba 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InB2_GPIO_Port, InB2_Pin, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2102      	movs	r1, #2
 800052c:	4816      	ldr	r0, [pc, #88]	@ (8000588 <outputTask+0x124>)
 800052e:	f000 fbb5 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InA1_GPIO_Port, InA1_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000538:	4813      	ldr	r0, [pc, #76]	@ (8000588 <outputTask+0x124>)
 800053a:	f000 fbaf 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InA2_GPIO_Port, InA2_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000544:	4810      	ldr	r0, [pc, #64]	@ (8000588 <outputTask+0x124>)
 8000546:	f000 fba9 	bl	8000c9c <HAL_GPIO_WritePin>
 800054a:	e016      	b.n	800057a <outputTask+0x116>
      }
      else
      {
    	  HAL_GPIO_WritePin(InB1_GPIO_Port, InB1_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000552:	480d      	ldr	r0, [pc, #52]	@ (8000588 <outputTask+0x124>)
 8000554:	f000 fba2 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InB2_GPIO_Port, InB2_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2102      	movs	r1, #2
 800055c:	480a      	ldr	r0, [pc, #40]	@ (8000588 <outputTask+0x124>)
 800055e:	f000 fb9d 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InA1_GPIO_Port, InA1_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000568:	4807      	ldr	r0, [pc, #28]	@ (8000588 <outputTask+0x124>)
 800056a:	f000 fb97 	bl	8000c9c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(InA2_GPIO_Port, InA2_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000574:	4804      	ldr	r0, [pc, #16]	@ (8000588 <outputTask+0x124>)
 8000576:	f000 fb91 	bl	8000c9c <HAL_GPIO_WritePin>
      }

	  osDelay(100);
 800057a:	2064      	movs	r0, #100	@ 0x64
 800057c:	f001 fa60 	bl	8001a40 <osDelay>
      if(button1State == GPIO_PIN_RESET)
 8000580:	e774      	b.n	800046c <outputTask+0x8>
 8000582:	bf00      	nop
 8000584:	20000038 	.word	0x20000038
 8000588:	48000400 	.word	0x48000400
 800058c:	20000039 	.word	0x20000039
 8000590:	2000003a 	.word	0x2000003a
 8000594:	2000003b 	.word	0x2000003b

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <Error_Handler+0x8>

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <HAL_MspInit+0x50>)
 80005ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005ae:	4a11      	ldr	r2, [pc, #68]	@ (80005f4 <HAL_MspInit+0x50>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80005b6:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <HAL_MspInit+0x50>)
 80005b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <HAL_MspInit+0x50>)
 80005c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005c6:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <HAL_MspInit+0x50>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <HAL_MspInit+0x50>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	210f      	movs	r1, #15
 80005de:	f06f 0001 	mvn.w	r0, #1
 80005e2:	f000 f99a 	bl	800091a <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005e6:	f000 fc15 	bl	8000e14 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <NMI_Handler+0x4>

08000600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <MemManage_Handler+0x4>

08000610 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <BusFault_Handler+0x4>

08000618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <UsageFault_Handler+0x4>

08000620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000632:	f000 f897 	bl	8000764 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000636:	f002 fe2b 	bl	8003290 <xTaskGetSchedulerState>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d001      	beq.n	8000644 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000640:	f003 fc22 	bl	8003e88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <SystemInit+0x20>)
 800064e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000652:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <SystemInit+0x20>)
 8000654:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000658:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000670:	f7ff ffea 	bl	8000648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	@ (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	@ (80006b0 <LoopForever+0xe>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	@ (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069a:	f003 fe7d 	bl	8004398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800069e:	f7ff fdbf 	bl	8000220 <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006b0:	080044d4 	.word	0x080044d4
  ldr r2, =_sbss
 80006b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006b8:	20001990 	.word	0x20001990

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>

080006be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f000 f91b 	bl	8000904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ce:	200f      	movs	r0, #15
 80006d0:	f000 f80e 	bl	80006f0 <HAL_InitTick>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d002      	beq.n	80006e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006da:	2301      	movs	r3, #1
 80006dc:	71fb      	strb	r3, [r7, #7]
 80006de:	e001      	b.n	80006e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006e0:	f7ff ff60 	bl	80005a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006e4:	79fb      	ldrb	r3, [r7, #7]

}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006fc:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <HAL_InitTick+0x68>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d022      	beq.n	800074a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000704:	4b15      	ldr	r3, [pc, #84]	@ (800075c <HAL_InitTick+0x6c>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <HAL_InitTick+0x68>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000710:	fbb1 f3f3 	udiv	r3, r1, r3
 8000714:	fbb2 f3f3 	udiv	r3, r2, r3
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f918 	bl	800094e <HAL_SYSTICK_Config>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10f      	bne.n	8000744 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b0f      	cmp	r3, #15
 8000728:	d809      	bhi.n	800073e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800072a:	2200      	movs	r2, #0
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	f04f 30ff 	mov.w	r0, #4294967295
 8000732:	f000 f8f2 	bl	800091a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000736:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <HAL_InitTick+0x70>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	e007      	b.n	800074e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	e004      	b.n	800074e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
 8000748:	e001      	b.n	800074e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800074e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000008 	.word	0x20000008
 800075c:	20000000 	.word	0x20000000
 8000760:	20000004 	.word	0x20000004

08000764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <HAL_IncTick+0x1c>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <HAL_IncTick+0x20>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4413      	add	r3, r2
 8000772:	4a03      	ldr	r2, [pc, #12]	@ (8000780 <HAL_IncTick+0x1c>)
 8000774:	6013      	str	r3, [r2, #0]
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	2000003c 	.word	0x2000003c
 8000784:	20000008 	.word	0x20000008

08000788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return uwTick;
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <HAL_GetTick+0x14>)
 800078e:	681b      	ldr	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	2000003c 	.word	0x2000003c

080007a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d2:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	60d3      	str	r3, [r2, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ec:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <__NVIC_GetPriorityGrouping+0x18>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 0307 	and.w	r3, r3, #7
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	db0a      	blt.n	800082e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	490c      	ldr	r1, [pc, #48]	@ (8000850 <__NVIC_SetPriority+0x4c>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800082c:	e00a      	b.n	8000844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4908      	ldr	r1, [pc, #32]	@ (8000854 <__NVIC_SetPriority+0x50>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	3b04      	subs	r3, #4
 800083c:	0112      	lsls	r2, r2, #4
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	440b      	add	r3, r1
 8000842:	761a      	strb	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	@ 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f1c3 0307 	rsb	r3, r3, #7
 8000872:	2b04      	cmp	r3, #4
 8000874:	bf28      	it	cs
 8000876:	2304      	movcs	r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3304      	adds	r3, #4
 800087e:	2b06      	cmp	r3, #6
 8000880:	d902      	bls.n	8000888 <NVIC_EncodePriority+0x30>
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3b03      	subs	r3, #3
 8000886:	e000      	b.n	800088a <NVIC_EncodePriority+0x32>
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	f04f 32ff 	mov.w	r2, #4294967295
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43da      	mvns	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	401a      	ands	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43d9      	mvns	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	4313      	orrs	r3, r2
         );
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3724      	adds	r7, #36	@ 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008d0:	d301      	bcc.n	80008d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00f      	b.n	80008f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <SysTick_Config+0x40>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008de:	210f      	movs	r1, #15
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f7ff ff8e 	bl	8000804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <SysTick_Config+0x40>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ee:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <SysTick_Config+0x40>)
 80008f0:	2207      	movs	r2, #7
 80008f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	e000e010 	.word	0xe000e010

08000904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff47 	bl	80007a0 <__NVIC_SetPriorityGrouping>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b086      	sub	sp, #24
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000928:	f7ff ff5e 	bl	80007e8 <__NVIC_GetPriorityGrouping>
 800092c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff ff90 	bl	8000858 <NVIC_EncodePriority>
 8000938:	4602      	mov	r2, r0
 800093a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5f 	bl	8000804 <__NVIC_SetPriority>
}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffb2 	bl	80008c0 <SysTick_Config>
 800095c:	4603      	mov	r3, r0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000976:	e15a      	b.n	8000c2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 814c 	beq.w	8000c28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d005      	beq.n	80009a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d130      	bne.n	8000a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	2203      	movs	r2, #3
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68da      	ldr	r2, [r3, #12]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009de:	2201      	movs	r2, #1
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	091b      	lsrs	r3, r3, #4
 80009f4:	f003 0201 	and.w	r2, r3, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d017      	beq.n	8000a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 0303 	and.w	r3, r3, #3
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d123      	bne.n	8000a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	08da      	lsrs	r2, r3, #3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3208      	adds	r2, #8
 8000a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	220f      	movs	r2, #15
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	691a      	ldr	r2, [r3, #16]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	08da      	lsrs	r2, r3, #3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3208      	adds	r2, #8
 8000a94:	6939      	ldr	r1, [r7, #16]
 8000a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 80a6 	beq.w	8000c28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000adc:	4b5b      	ldr	r3, [pc, #364]	@ (8000c4c <HAL_GPIO_Init+0x2e4>)
 8000ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae0:	4a5a      	ldr	r2, [pc, #360]	@ (8000c4c <HAL_GPIO_Init+0x2e4>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ae8:	4b58      	ldr	r3, [pc, #352]	@ (8000c4c <HAL_GPIO_Init+0x2e4>)
 8000aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000af4:	4a56      	ldr	r2, [pc, #344]	@ (8000c50 <HAL_GPIO_Init+0x2e8>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b1e:	d01f      	beq.n	8000b60 <HAL_GPIO_Init+0x1f8>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4c      	ldr	r2, [pc, #304]	@ (8000c54 <HAL_GPIO_Init+0x2ec>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d019      	beq.n	8000b5c <HAL_GPIO_Init+0x1f4>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a4b      	ldr	r2, [pc, #300]	@ (8000c58 <HAL_GPIO_Init+0x2f0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d013      	beq.n	8000b58 <HAL_GPIO_Init+0x1f0>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a4a      	ldr	r2, [pc, #296]	@ (8000c5c <HAL_GPIO_Init+0x2f4>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d00d      	beq.n	8000b54 <HAL_GPIO_Init+0x1ec>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a49      	ldr	r2, [pc, #292]	@ (8000c60 <HAL_GPIO_Init+0x2f8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d007      	beq.n	8000b50 <HAL_GPIO_Init+0x1e8>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a48      	ldr	r2, [pc, #288]	@ (8000c64 <HAL_GPIO_Init+0x2fc>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d101      	bne.n	8000b4c <HAL_GPIO_Init+0x1e4>
 8000b48:	2305      	movs	r3, #5
 8000b4a:	e00a      	b.n	8000b62 <HAL_GPIO_Init+0x1fa>
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	e008      	b.n	8000b62 <HAL_GPIO_Init+0x1fa>
 8000b50:	2304      	movs	r3, #4
 8000b52:	e006      	b.n	8000b62 <HAL_GPIO_Init+0x1fa>
 8000b54:	2303      	movs	r3, #3
 8000b56:	e004      	b.n	8000b62 <HAL_GPIO_Init+0x1fa>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e002      	b.n	8000b62 <HAL_GPIO_Init+0x1fa>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <HAL_GPIO_Init+0x1fa>
 8000b60:	2300      	movs	r3, #0
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	f002 0203 	and.w	r2, r2, #3
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	4093      	lsls	r3, r2
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b72:	4937      	ldr	r1, [pc, #220]	@ (8000c50 <HAL_GPIO_Init+0x2e8>)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b80:	4b39      	ldr	r3, [pc, #228]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ba4:	4a30      	ldr	r2, [pc, #192]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000baa:	4b2f      	ldr	r3, [pc, #188]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bce:	4a26      	ldr	r2, [pc, #152]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000bd4:	4b24      	ldr	r3, [pc, #144]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c22:	4a11      	ldr	r2, [pc, #68]	@ (8000c68 <HAL_GPIO_Init+0x300>)
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	fa22 f303 	lsr.w	r3, r2, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f47f ae9d 	bne.w	8000978 <HAL_GPIO_Init+0x10>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	bf00      	nop
 8000c42:	371c      	adds	r7, #28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000
 8000c54:	48000400 	.word	0x48000400
 8000c58:	48000800 	.word	0x48000800
 8000c5c:	48000c00 	.word	0x48000c00
 8000c60:	48001000 	.word	0x48001000
 8000c64:	48001400 	.word	0x48001400
 8000c68:	40010400 	.word	0x40010400

08000c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e001      	b.n	8000c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cac:	787b      	ldrb	r3, [r7, #1]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb8:	e002      	b.n	8000cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d141      	bne.n	8000d5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cda:	4b4b      	ldr	r3, [pc, #300]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ce6:	d131      	bne.n	8000d4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ce8:	4b47      	ldr	r3, [pc, #284]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cee:	4a46      	ldr	r2, [pc, #280]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cf4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf8:	4b43      	ldr	r3, [pc, #268]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d00:	4a41      	ldr	r2, [pc, #260]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d08:	4b40      	ldr	r3, [pc, #256]	@ (8000e0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2232      	movs	r2, #50	@ 0x32
 8000d0e:	fb02 f303 	mul.w	r3, r2, r3
 8000d12:	4a3f      	ldr	r2, [pc, #252]	@ (8000e10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d14:	fba2 2303 	umull	r2, r3, r2, r3
 8000d18:	0c9b      	lsrs	r3, r3, #18
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d1e:	e002      	b.n	8000d26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d26:	4b38      	ldr	r3, [pc, #224]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d32:	d102      	bne.n	8000d3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f2      	bne.n	8000d20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d3a:	4b33      	ldr	r3, [pc, #204]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d46:	d158      	bne.n	8000dfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e057      	b.n	8000dfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d52:	4a2d      	ldr	r2, [pc, #180]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d5c:	e04d      	b.n	8000dfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d64:	d141      	bne.n	8000dea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d66:	4b28      	ldr	r3, [pc, #160]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d72:	d131      	bne.n	8000dd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d74:	4b24      	ldr	r3, [pc, #144]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d7a:	4a23      	ldr	r2, [pc, #140]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d84:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2232      	movs	r2, #50	@ 0x32
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000da0:	fba2 2303 	umull	r2, r3, r2, r3
 8000da4:	0c9b      	lsrs	r3, r3, #18
 8000da6:	3301      	adds	r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000daa:	e002      	b.n	8000db2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dbe:	d102      	bne.n	8000dc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f2      	bne.n	8000dac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dd2:	d112      	bne.n	8000dfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e011      	b.n	8000dfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000de8:	e007      	b.n	8000dfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dea:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000df8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40007000 	.word	0x40007000
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	431bde83 	.word	0x431bde83

08000e14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000e1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e22:	6093      	str	r3, [r2, #8]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40007000 	.word	0x40007000

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e2fe      	b.n	8001444 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d075      	beq.n	8000f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e52:	4b97      	ldr	r3, [pc, #604]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e5c:	4b94      	ldr	r3, [pc, #592]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	2b0c      	cmp	r3, #12
 8000e6a:	d102      	bne.n	8000e72 <HAL_RCC_OscConfig+0x3e>
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d002      	beq.n	8000e78 <HAL_RCC_OscConfig+0x44>
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d10b      	bne.n	8000e90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e78:	4b8d      	ldr	r3, [pc, #564]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d05b      	beq.n	8000f3c <HAL_RCC_OscConfig+0x108>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d157      	bne.n	8000f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e2d9      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e98:	d106      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x74>
 8000e9a:	4b85      	ldr	r3, [pc, #532]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a84      	ldr	r2, [pc, #528]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e01d      	b.n	8000ee4 <HAL_RCC_OscConfig+0xb0>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0x98>
 8000eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a7b      	ldr	r2, [pc, #492]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e00b      	b.n	8000ee4 <HAL_RCC_OscConfig+0xb0>
 8000ecc:	4b78      	ldr	r3, [pc, #480]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a77      	ldr	r2, [pc, #476]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b75      	ldr	r3, [pc, #468]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a74      	ldr	r2, [pc, #464]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d013      	beq.n	8000f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eec:	f7ff fc4c 	bl	8000788 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff fc48 	bl	8000788 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b64      	cmp	r3, #100	@ 0x64
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e29e      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f06:	4b6a      	ldr	r3, [pc, #424]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f0      	beq.n	8000ef4 <HAL_RCC_OscConfig+0xc0>
 8000f12:	e014      	b.n	8000f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f14:	f7ff fc38 	bl	8000788 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fc34 	bl	8000788 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	@ 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e28a      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f2e:	4b60      	ldr	r3, [pc, #384]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f0      	bne.n	8000f1c <HAL_RCC_OscConfig+0xe8>
 8000f3a:	e000      	b.n	8000f3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d075      	beq.n	8001036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f4a:	4b59      	ldr	r3, [pc, #356]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f54:	4b56      	ldr	r3, [pc, #344]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	2b0c      	cmp	r3, #12
 8000f62:	d102      	bne.n	8000f6a <HAL_RCC_OscConfig+0x136>
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d002      	beq.n	8000f70 <HAL_RCC_OscConfig+0x13c>
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d11f      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f70:	4b4f      	ldr	r3, [pc, #316]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d005      	beq.n	8000f88 <HAL_RCC_OscConfig+0x154>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e25d      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f88:	4b49      	ldr	r3, [pc, #292]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	061b      	lsls	r3, r3, #24
 8000f96:	4946      	ldr	r1, [pc, #280]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f9c:	4b45      	ldr	r3, [pc, #276]	@ (80010b4 <HAL_RCC_OscConfig+0x280>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fba5 	bl	80006f0 <HAL_InitTick>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d043      	beq.n	8001034 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e249      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d023      	beq.n	8001000 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fbe0 	bl	8000788 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fbdc 	bl	8000788 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e232      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fde:	4b34      	ldr	r3, [pc, #208]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fea:	4b31      	ldr	r3, [pc, #196]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	061b      	lsls	r3, r3, #24
 8000ff8:	492d      	ldr	r1, [pc, #180]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	604b      	str	r3, [r1, #4]
 8000ffe:	e01a      	b.n	8001036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001000:	4b2b      	ldr	r3, [pc, #172]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a2a      	ldr	r2, [pc, #168]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8001006:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800100a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100c:	f7ff fbbc 	bl	8000788 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001014:	f7ff fbb8 	bl	8000788 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e20e      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001026:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0x1e0>
 8001032:	e000      	b.n	8001036 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001034:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d041      	beq.n	80010c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d01c      	beq.n	8001084 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800104a:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 800104c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001050:	4a17      	ldr	r2, [pc, #92]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800105a:	f7ff fb95 	bl	8000788 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001062:	f7ff fb91 	bl	8000788 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e1e7      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001074:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8001076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0ef      	beq.n	8001062 <HAL_RCC_OscConfig+0x22e>
 8001082:	e020      	b.n	80010c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8001086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800108a:	4a09      	ldr	r2, [pc, #36]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001094:	f7ff fb78 	bl	8000788 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800109a:	e00d      	b.n	80010b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800109c:	f7ff fb74 	bl	8000788 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d906      	bls.n	80010b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e1ca      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b8:	4b8c      	ldr	r3, [pc, #560]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80010ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1ea      	bne.n	800109c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80a6 	beq.w	8001220 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80010d8:	4b84      	ldr	r3, [pc, #528]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80010da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_RCC_OscConfig+0x2b4>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <HAL_RCC_OscConfig+0x2b6>
 80010e8:	2300      	movs	r3, #0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00d      	beq.n	800110a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	4b7f      	ldr	r3, [pc, #508]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	4a7e      	ldr	r2, [pc, #504]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010fa:	4b7c      	ldr	r3, [pc, #496]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001106:	2301      	movs	r3, #1
 8001108:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800110a:	4b79      	ldr	r3, [pc, #484]	@ (80012f0 <HAL_RCC_OscConfig+0x4bc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001112:	2b00      	cmp	r3, #0
 8001114:	d118      	bne.n	8001148 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001116:	4b76      	ldr	r3, [pc, #472]	@ (80012f0 <HAL_RCC_OscConfig+0x4bc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a75      	ldr	r2, [pc, #468]	@ (80012f0 <HAL_RCC_OscConfig+0x4bc>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001122:	f7ff fb31 	bl	8000788 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112a:	f7ff fb2d 	bl	8000788 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e183      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800113c:	4b6c      	ldr	r3, [pc, #432]	@ (80012f0 <HAL_RCC_OscConfig+0x4bc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d108      	bne.n	8001162 <HAL_RCC_OscConfig+0x32e>
 8001150:	4b66      	ldr	r3, [pc, #408]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001156:	4a65      	ldr	r2, [pc, #404]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001160:	e024      	b.n	80011ac <HAL_RCC_OscConfig+0x378>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d110      	bne.n	800118c <HAL_RCC_OscConfig+0x358>
 800116a:	4b60      	ldr	r3, [pc, #384]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800116c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001170:	4a5e      	ldr	r2, [pc, #376]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800117a:	4b5c      	ldr	r3, [pc, #368]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800117c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001180:	4a5a      	ldr	r2, [pc, #360]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800118a:	e00f      	b.n	80011ac <HAL_RCC_OscConfig+0x378>
 800118c:	4b57      	ldr	r3, [pc, #348]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800118e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001192:	4a56      	ldr	r2, [pc, #344]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800119c:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800119e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a2:	4a52      	ldr	r2, [pc, #328]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d016      	beq.n	80011e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b4:	f7ff fae8 	bl	8000788 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011bc:	f7ff fae4 	bl	8000788 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e138      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011d2:	4b46      	ldr	r3, [pc, #280]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80011d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0ed      	beq.n	80011bc <HAL_RCC_OscConfig+0x388>
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e2:	f7ff fad1 	bl	8000788 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011e8:	e00a      	b.n	8001200 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ea:	f7ff facd 	bl	8000788 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e121      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001200:	4b3a      	ldr	r3, [pc, #232]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1ed      	bne.n	80011ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800120e:	7ffb      	ldrb	r3, [r7, #31]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001214:	4b35      	ldr	r3, [pc, #212]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001218:	4a34      	ldr	r2, [pc, #208]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800121a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800121e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	2b00      	cmp	r3, #0
 800122a:	d03c      	beq.n	80012a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01c      	beq.n	800126e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001234:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001236:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800123a:	4a2c      	ldr	r2, [pc, #176]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001244:	f7ff faa0 	bl	8000788 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800124c:	f7ff fa9c 	bl	8000788 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e0f2      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800125e:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001260:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0ef      	beq.n	800124c <HAL_RCC_OscConfig+0x418>
 800126c:	e01b      	b.n	80012a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800126e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001270:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001274:	4a1d      	ldr	r2, [pc, #116]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127e:	f7ff fa83 	bl	8000788 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001286:	f7ff fa7f 	bl	8000788 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e0d5      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800129a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1ef      	bne.n	8001286 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80c9 	beq.w	8001442 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012b0:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	f000 8083 	beq.w	80013c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d15e      	bne.n	8001384 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80012cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d2:	f7ff fa59 	bl	8000788 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d8:	e00c      	b.n	80012f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff fa55 	bl	8000788 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d905      	bls.n	80012f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e0ab      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012f4:	4b55      	ldr	r3, [pc, #340]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1ec      	bne.n	80012da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001300:	4b52      	ldr	r3, [pc, #328]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	4b52      	ldr	r3, [pc, #328]	@ (8001450 <HAL_RCC_OscConfig+0x61c>)
 8001306:	4013      	ands	r3, r2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6a11      	ldr	r1, [r2, #32]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001310:	3a01      	subs	r2, #1
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	4311      	orrs	r1, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800131a:	0212      	lsls	r2, r2, #8
 800131c:	4311      	orrs	r1, r2
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001322:	0852      	lsrs	r2, r2, #1
 8001324:	3a01      	subs	r2, #1
 8001326:	0552      	lsls	r2, r2, #21
 8001328:	4311      	orrs	r1, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800132e:	0852      	lsrs	r2, r2, #1
 8001330:	3a01      	subs	r2, #1
 8001332:	0652      	lsls	r2, r2, #25
 8001334:	4311      	orrs	r1, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800133a:	06d2      	lsls	r2, r2, #27
 800133c:	430a      	orrs	r2, r1
 800133e:	4943      	ldr	r1, [pc, #268]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001340:	4313      	orrs	r3, r2
 8001342:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001344:	4b41      	ldr	r3, [pc, #260]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a40      	ldr	r2, [pc, #256]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 800134a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800134e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001350:	4b3e      	ldr	r3, [pc, #248]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4a3d      	ldr	r2, [pc, #244]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800135a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fa14 	bl	8000788 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001364:	f7ff fa10 	bl	8000788 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e066      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001376:	4b35      	ldr	r3, [pc, #212]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0x530>
 8001382:	e05e      	b.n	8001442 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001384:	4b31      	ldr	r3, [pc, #196]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a30      	ldr	r2, [pc, #192]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 800138a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800138e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff f9fa 	bl	8000788 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001398:	f7ff f9f6 	bl	8000788 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e04c      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013aa:	4b28      	ldr	r3, [pc, #160]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80013b6:	4b25      	ldr	r3, [pc, #148]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	4924      	ldr	r1, [pc, #144]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 80013bc:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <HAL_RCC_OscConfig+0x620>)
 80013be:	4013      	ands	r3, r2
 80013c0:	60cb      	str	r3, [r1, #12]
 80013c2:	e03e      	b.n	8001442 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e039      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80013d0:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f003 0203 	and.w	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d12c      	bne.n	800143e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	3b01      	subs	r3, #1
 80013f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d123      	bne.n	800143e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d11b      	bne.n	800143e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001410:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d113      	bne.n	800143e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	3b01      	subs	r3, #1
 8001424:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001426:	429a      	cmp	r2, r3
 8001428:	d109      	bne.n	800143e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001434:	085b      	lsrs	r3, r3, #1
 8001436:	3b01      	subs	r3, #1
 8001438:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	019f800c 	.word	0x019f800c
 8001454:	feeefffc 	.word	0xfeeefffc

08001458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e11e      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b91      	ldr	r3, [pc, #580]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d910      	bls.n	80014a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b8e      	ldr	r3, [pc, #568]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 020f 	bic.w	r2, r3, #15
 8001486:	498c      	ldr	r1, [pc, #560]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b8a      	ldr	r3, [pc, #552]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e106      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d073      	beq.n	8001594 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d129      	bne.n	8001508 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b4:	4b81      	ldr	r3, [pc, #516]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0f4      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80014c4:	f000 f966 	bl	8001794 <RCC_GetSysClockFreqFromPLLSource>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4a7c      	ldr	r2, [pc, #496]	@ (80016c0 <HAL_RCC_ClockConfig+0x268>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d93f      	bls.n	8001552 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014d2:	4b7a      	ldr	r3, [pc, #488]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d033      	beq.n	8001552 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d12f      	bne.n	8001552 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014f2:	4b72      	ldr	r3, [pc, #456]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014fa:	4a70      	ldr	r2, [pc, #448]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80014fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001500:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001502:	2380      	movs	r3, #128	@ 0x80
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e024      	b.n	8001552 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d107      	bne.n	8001520 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001510:	4b6a      	ldr	r3, [pc, #424]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d109      	bne.n	8001530 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0c6      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001520:	4b66      	ldr	r3, [pc, #408]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0be      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001530:	f000 f8ce 	bl	80016d0 <HAL_RCC_GetSysClockFreq>
 8001534:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4a61      	ldr	r2, [pc, #388]	@ (80016c0 <HAL_RCC_ClockConfig+0x268>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d909      	bls.n	8001552 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800153e:	4b5f      	ldr	r3, [pc, #380]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001546:	4a5d      	ldr	r2, [pc, #372]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800154c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800154e:	2380      	movs	r3, #128	@ 0x80
 8001550:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b5a      	ldr	r3, [pc, #360]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4957      	ldr	r1, [pc, #348]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001560:	4313      	orrs	r3, r2
 8001562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001564:	f7ff f910 	bl	8000788 <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff f90c 	bl	8000788 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e095      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b4e      	ldr	r3, [pc, #312]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d023      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	4b43      	ldr	r3, [pc, #268]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a42      	ldr	r2, [pc, #264]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d007      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80015c4:	4b3d      	ldr	r3, [pc, #244]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80015cc:	4a3b      	ldr	r2, [pc, #236]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4936      	ldr	r1, [pc, #216]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
 80015e6:	e008      	b.n	80015fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b80      	cmp	r3, #128	@ 0x80
 80015ec:	d105      	bne.n	80015fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80015ee:	4b33      	ldr	r3, [pc, #204]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	4a32      	ldr	r2, [pc, #200]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80015f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015fa:	4b2f      	ldr	r3, [pc, #188]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d21d      	bcs.n	8001644 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001608:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 020f 	bic.w	r2, r3, #15
 8001610:	4929      	ldr	r1, [pc, #164]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001618:	f7ff f8b6 	bl	8000788 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	e00a      	b.n	8001636 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff f8b2 	bl	8000788 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e03b      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d1ed      	bne.n	8001620 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4917      	ldr	r1, [pc, #92]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	490f      	ldr	r1, [pc, #60]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001682:	f000 f825 	bl	80016d0 <HAL_RCC_GetSysClockFreq>
 8001686:	4602      	mov	r2, r0
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <HAL_RCC_ClockConfig+0x26c>)
 8001694:	5ccb      	ldrb	r3, [r1, r3]
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <HAL_RCC_ClockConfig+0x270>)
 80016a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_RCC_ClockConfig+0x274>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f822 	bl	80006f0 <HAL_InitTick>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40022000 	.word	0x40022000
 80016bc:	40021000 	.word	0x40021000
 80016c0:	04c4b400 	.word	0x04c4b400
 80016c4:	080044bc 	.word	0x080044bc
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d102      	bne.n	80016e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016e2:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	e047      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016e8:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016f4:	4b26      	ldr	r3, [pc, #152]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	e03e      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80016fa:	4b23      	ldr	r3, [pc, #140]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b0c      	cmp	r3, #12
 8001704:	d136      	bne.n	8001774 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001706:	4b20      	ldr	r3, [pc, #128]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001710:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3301      	adds	r3, #1
 800171c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d10c      	bne.n	800173e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001724:	4a1a      	ldr	r2, [pc, #104]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	4a16      	ldr	r2, [pc, #88]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 800172e:	68d2      	ldr	r2, [r2, #12]
 8001730:	0a12      	lsrs	r2, r2, #8
 8001732:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
      break;
 800173c:	e00c      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800173e:	4a13      	ldr	r2, [pc, #76]	@ (800178c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4a10      	ldr	r2, [pc, #64]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001748:	68d2      	ldr	r2, [r2, #12]
 800174a:	0a12      	lsrs	r2, r2, #8
 800174c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
      break;
 8001756:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001758:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0e5b      	lsrs	r3, r3, #25
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	3301      	adds	r3, #1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	e001      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001778:	693b      	ldr	r3, [r7, #16]
}
 800177a:	4618      	mov	r0, r3
 800177c:	371c      	adds	r7, #28
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000
 800178c:	00f42400 	.word	0x00f42400
 8001790:	007a1200 	.word	0x007a1200

08001794 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800179a:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3301      	adds	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d10c      	bne.n	80017d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017b8:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017c2:	68d2      	ldr	r2, [r2, #12]
 80017c4:	0a12      	lsrs	r2, r2, #8
 80017c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
    break;
 80017d0:	e00c      	b.n	80017ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017d2:	4a12      	ldr	r2, [pc, #72]	@ (800181c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4a0e      	ldr	r2, [pc, #56]	@ (8001814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017dc:	68d2      	ldr	r2, [r2, #12]
 80017de:	0a12      	lsrs	r2, r2, #8
 80017e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017e4:	fb02 f303 	mul.w	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
    break;
 80017ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0e5b      	lsrs	r3, r3, #25
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	3301      	adds	r3, #1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001806:	687b      	ldr	r3, [r7, #4]
}
 8001808:	4618      	mov	r0, r3
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40021000 	.word	0x40021000
 8001818:	007a1200 	.word	0x007a1200
 800181c:	00f42400 	.word	0x00f42400

08001820 <__NVIC_SetPriority>:
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	@ (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	@ (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001878:	2100      	movs	r1, #0
 800187a:	f06f 0004 	mvn.w	r0, #4
 800187e:	f7ff ffcf 	bl	8001820 <__NVIC_SetPriority>
#endif
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800188e:	f3ef 8305 	mrs	r3, IPSR
 8001892:	603b      	str	r3, [r7, #0]
  return(result);
 8001894:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800189a:	f06f 0305 	mvn.w	r3, #5
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	e00c      	b.n	80018bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <osKernelInitialize+0x44>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <osKernelInitialize+0x44>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	e002      	b.n	80018bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80018bc:	687b      	ldr	r3, [r7, #4]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000040 	.word	0x20000040

080018d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018d6:	f3ef 8305 	mrs	r3, IPSR
 80018da:	603b      	str	r3, [r7, #0]
  return(result);
 80018dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80018e2:	f06f 0305 	mvn.w	r3, #5
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	e010      	b.n	800190c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <osKernelStart+0x48>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d109      	bne.n	8001906 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80018f2:	f7ff ffbf 	bl	8001874 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <osKernelStart+0x48>)
 80018f8:	2202      	movs	r2, #2
 80018fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80018fc:	f001 f87a 	bl	80029f4 <vTaskStartScheduler>
      stat = osOK;
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	e002      	b.n	800190c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000040 	.word	0x20000040

0800191c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b08e      	sub	sp, #56	@ 0x38
 8001920:	af04      	add	r7, sp, #16
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800192c:	f3ef 8305 	mrs	r3, IPSR
 8001930:	617b      	str	r3, [r7, #20]
  return(result);
 8001932:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001934:	2b00      	cmp	r3, #0
 8001936:	d17e      	bne.n	8001a36 <osThreadNew+0x11a>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d07b      	beq.n	8001a36 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800193e:	2380      	movs	r3, #128	@ 0x80
 8001940:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001942:	2318      	movs	r3, #24
 8001944:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d045      	beq.n	80019e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <osThreadNew+0x48>
        name = attr->name;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <osThreadNew+0x6e>
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b38      	cmp	r3, #56	@ 0x38
 800197c:	d805      	bhi.n	800198a <osThreadNew+0x6e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <osThreadNew+0x72>
        return (NULL);
 800198a:	2300      	movs	r3, #0
 800198c:	e054      	b.n	8001a38 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00e      	beq.n	80019c4 <osThreadNew+0xa8>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b5b      	cmp	r3, #91	@ 0x5b
 80019ac:	d90a      	bls.n	80019c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d006      	beq.n	80019c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <osThreadNew+0xa8>
        mem = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	e010      	b.n	80019e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10c      	bne.n	80019e6 <osThreadNew+0xca>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d108      	bne.n	80019e6 <osThreadNew+0xca>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d104      	bne.n	80019e6 <osThreadNew+0xca>
          mem = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	e001      	b.n	80019e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d110      	bne.n	8001a0e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80019f4:	9202      	str	r2, [sp, #8]
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	6a3a      	ldr	r2, [r7, #32]
 8001a00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fe1a 	bl	800263c <xTaskCreateStatic>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	e013      	b.n	8001a36 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d110      	bne.n	8001a36 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 fe68 	bl	80026fc <xTaskCreate>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d001      	beq.n	8001a36 <osThreadNew+0x11a>
            hTask = NULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001a36:	693b      	ldr	r3, [r7, #16]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3728      	adds	r7, #40	@ 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a48:	f3ef 8305 	mrs	r3, IPSR
 8001a4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <osDelay+0x1c>
    stat = osErrorISR;
 8001a54:	f06f 0305 	mvn.w	r3, #5
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	e007      	b.n	8001a6c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <osDelay+0x2c>
      vTaskDelay(ticks);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 ff8e 	bl	8002988 <vTaskDelay>
    }
  }

  return (stat);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	4a06      	ldr	r2, [pc, #24]	@ (8001aa8 <vApplicationGetIdleTaskMemory+0x30>)
 8001a8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2280      	movs	r2, #128	@ 0x80
 8001a94:	601a      	str	r2, [r3, #0]
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000044 	.word	0x20000044
 8001aa8:	200000a0 	.word	0x200000a0

08001aac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4a07      	ldr	r2, [pc, #28]	@ (8001ad8 <vApplicationGetTimerTaskMemory+0x2c>)
 8001abc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	4a06      	ldr	r2, [pc, #24]	@ (8001adc <vApplicationGetTimerTaskMemory+0x30>)
 8001ac2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	200002a0 	.word	0x200002a0
 8001adc:	200002fc 	.word	0x200002fc

08001ae0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f103 0208 	add.w	r2, r3, #8
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f103 0208 	add.w	r2, r3, #8
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f103 0208 	add.w	r2, r3, #8
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	601a      	str	r2, [r3, #0]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b82:	b480      	push	{r7}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d103      	bne.n	8001ba2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	e00c      	b.n	8001bbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3308      	adds	r3, #8
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	e002      	b.n	8001bb0 <vListInsert+0x2e>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d2f6      	bcs.n	8001baa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6892      	ldr	r2, [r2, #8]
 8001c0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6852      	ldr	r2, [r2, #4]
 8001c14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d103      	bne.n	8001c28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	1e5a      	subs	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c60:	f383 8811 	msr	BASEPRI, r3
 8001c64:	f3bf 8f6f 	isb	sy
 8001c68:	f3bf 8f4f 	dsb	sy
 8001c6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001c74:	f002 f878 	bl	8003d68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c80:	68f9      	ldr	r1, [r7, #12]
 8001c82:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	441a      	add	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	68f9      	ldr	r1, [r7, #12]
 8001ca8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	441a      	add	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	22ff      	movs	r2, #255	@ 0xff
 8001cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	22ff      	movs	r2, #255	@ 0xff
 8001cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d114      	bne.n	8001cf4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01a      	beq.n	8001d08 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3310      	adds	r3, #16
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 f91a 	bl	8002f10 <xTaskRemoveFromEventList>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d012      	beq.n	8001d08 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <xQueueGenericReset+0xd0>)
 8001ce4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f3bf 8f4f 	dsb	sy
 8001cee:	f3bf 8f6f 	isb	sy
 8001cf2:	e009      	b.n	8001d08 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3310      	adds	r3, #16
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fef1 	bl	8001ae0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3324      	adds	r3, #36	@ 0x24
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff feec 	bl	8001ae0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001d08:	f002 f860 	bl	8003dcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000ed04 	.word	0xe000ed04

08001d1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08e      	sub	sp, #56	@ 0x38
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10b      	bne.n	8001d48 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d34:	f383 8811 	msr	BASEPRI, r3
 8001d38:	f3bf 8f6f 	isb	sy
 8001d3c:	f3bf 8f4f 	dsb	sy
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10b      	bne.n	8001d66 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d52:	f383 8811 	msr	BASEPRI, r3
 8001d56:	f3bf 8f6f 	isb	sy
 8001d5a:	f3bf 8f4f 	dsb	sy
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	e7fd      	b.n	8001d62 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <xQueueGenericCreateStatic+0x56>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <xQueueGenericCreateStatic+0x5a>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <xQueueGenericCreateStatic+0x5c>
 8001d76:	2300      	movs	r3, #0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10b      	bne.n	8001d94 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d80:	f383 8811 	msr	BASEPRI, r3
 8001d84:	f3bf 8f6f 	isb	sy
 8001d88:	f3bf 8f4f 	dsb	sy
 8001d8c:	623b      	str	r3, [r7, #32]
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <xQueueGenericCreateStatic+0x84>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <xQueueGenericCreateStatic+0x88>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <xQueueGenericCreateStatic+0x8a>
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10b      	bne.n	8001dc2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dae:	f383 8811 	msr	BASEPRI, r3
 8001db2:	f3bf 8f6f 	isb	sy
 8001db6:	f3bf 8f4f 	dsb	sy
 8001dba:	61fb      	str	r3, [r7, #28]
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	e7fd      	b.n	8001dbe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001dc2:	2350      	movs	r3, #80	@ 0x50
 8001dc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b50      	cmp	r3, #80	@ 0x50
 8001dca:	d00b      	beq.n	8001de4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dd0:	f383 8811 	msr	BASEPRI, r3
 8001dd4:	f3bf 8f6f 	isb	sy
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	61bb      	str	r3, [r7, #24]
}
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001de4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00d      	beq.n	8001e0c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001df8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f805 	bl	8001e16 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3730      	adds	r7, #48	@ 0x30
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e002      	b.n	8001e38 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e44:	2101      	movs	r1, #1
 8001e46:	69b8      	ldr	r0, [r7, #24]
 8001e48:	f7ff fefe 	bl	8001c48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08e      	sub	sp, #56	@ 0x38
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10b      	bne.n	8001e90 <xQueueGenericSend+0x34>
	__asm volatile
 8001e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e7c:	f383 8811 	msr	BASEPRI, r3
 8001e80:	f3bf 8f6f 	isb	sy
 8001e84:	f3bf 8f4f 	dsb	sy
 8001e88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <xQueueGenericSend+0x42>
 8001e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <xQueueGenericSend+0x46>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <xQueueGenericSend+0x48>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10b      	bne.n	8001ec0 <xQueueGenericSend+0x64>
	__asm volatile
 8001ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eac:	f383 8811 	msr	BASEPRI, r3
 8001eb0:	f3bf 8f6f 	isb	sy
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d103      	bne.n	8001ece <xQueueGenericSend+0x72>
 8001ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <xQueueGenericSend+0x76>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <xQueueGenericSend+0x78>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10b      	bne.n	8001ef0 <xQueueGenericSend+0x94>
	__asm volatile
 8001ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001edc:	f383 8811 	msr	BASEPRI, r3
 8001ee0:	f3bf 8f6f 	isb	sy
 8001ee4:	f3bf 8f4f 	dsb	sy
 8001ee8:	623b      	str	r3, [r7, #32]
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ef0:	f001 f9ce 	bl	8003290 <xTaskGetSchedulerState>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <xQueueGenericSend+0xa4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <xQueueGenericSend+0xa8>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <xQueueGenericSend+0xaa>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10b      	bne.n	8001f22 <xQueueGenericSend+0xc6>
	__asm volatile
 8001f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f0e:	f383 8811 	msr	BASEPRI, r3
 8001f12:	f3bf 8f6f 	isb	sy
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	61fb      	str	r3, [r7, #28]
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	e7fd      	b.n	8001f1e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f22:	f001 ff21 	bl	8003d68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d302      	bcc.n	8001f38 <xQueueGenericSend+0xdc>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d129      	bne.n	8001f8c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f3e:	f000 fa0f 	bl	8002360 <prvCopyDataToQueue>
 8001f42:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d010      	beq.n	8001f6e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f4e:	3324      	adds	r3, #36	@ 0x24
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 ffdd 	bl	8002f10 <xTaskRemoveFromEventList>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800205c <xQueueGenericSend+0x200>)
 8001f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	f3bf 8f4f 	dsb	sy
 8001f68:	f3bf 8f6f 	isb	sy
 8001f6c:	e00a      	b.n	8001f84 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001f74:	4b39      	ldr	r3, [pc, #228]	@ (800205c <xQueueGenericSend+0x200>)
 8001f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001f84:	f001 ff22 	bl	8003dcc <vPortExitCritical>
				return pdPASS;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e063      	b.n	8002054 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d103      	bne.n	8001f9a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f92:	f001 ff1b 	bl	8003dcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e05c      	b.n	8002054 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d106      	bne.n	8001fae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f001 f817 	bl	8002fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001faa:	2301      	movs	r3, #1
 8001fac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001fae:	f001 ff0d 	bl	8003dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001fb2:	f000 fd87 	bl	8002ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001fb6:	f001 fed7 	bl	8003d68 <vPortEnterCritical>
 8001fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001fc0:	b25b      	sxtb	r3, r3
 8001fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc6:	d103      	bne.n	8001fd0 <xQueueGenericSend+0x174>
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d103      	bne.n	8001fe6 <xQueueGenericSend+0x18a>
 8001fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fe6:	f001 fef1 	bl	8003dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fea:	1d3a      	adds	r2, r7, #4
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f001 f806 	bl	8003004 <xTaskCheckForTimeOut>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d124      	bne.n	8002048 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ffe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002000:	f000 faa6 	bl	8002550 <prvIsQueueFull>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d018      	beq.n	800203c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800200a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800200c:	3310      	adds	r3, #16
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f000 ff2a 	bl	8002e6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002018:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800201a:	f000 fa31 	bl	8002480 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800201e:	f000 fd5f 	bl	8002ae0 <xTaskResumeAll>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	f47f af7c 	bne.w	8001f22 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800202a:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <xQueueGenericSend+0x200>)
 800202c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	f3bf 8f4f 	dsb	sy
 8002036:	f3bf 8f6f 	isb	sy
 800203a:	e772      	b.n	8001f22 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800203c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800203e:	f000 fa1f 	bl	8002480 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002042:	f000 fd4d 	bl	8002ae0 <xTaskResumeAll>
 8002046:	e76c      	b.n	8001f22 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002048:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800204a:	f000 fa19 	bl	8002480 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800204e:	f000 fd47 	bl	8002ae0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002052:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002054:	4618      	mov	r0, r3
 8002056:	3738      	adds	r7, #56	@ 0x38
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	e000ed04 	.word	0xe000ed04

08002060 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b090      	sub	sp, #64	@ 0x40
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <xQueueGenericSendFromISR+0x3e>
 8002096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <xQueueGenericSendFromISR+0x42>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <xQueueGenericSendFromISR+0x44>
 80020a2:	2300      	movs	r3, #0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10b      	bne.n	80020c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80020a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ac:	f383 8811 	msr	BASEPRI, r3
 80020b0:	f3bf 8f6f 	isb	sy
 80020b4:	f3bf 8f4f 	dsb	sy
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d103      	bne.n	80020ce <xQueueGenericSendFromISR+0x6e>
 80020c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <xQueueGenericSendFromISR+0x72>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <xQueueGenericSendFromISR+0x74>
 80020d2:	2300      	movs	r3, #0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10b      	bne.n	80020f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80020d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	623b      	str	r3, [r7, #32]
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020f0:	f001 ff1a 	bl	8003f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80020f4:	f3ef 8211 	mrs	r2, BASEPRI
 80020f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020fc:	f383 8811 	msr	BASEPRI, r3
 8002100:	f3bf 8f6f 	isb	sy
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	61fa      	str	r2, [r7, #28]
 800210a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800210c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800210e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002118:	429a      	cmp	r2, r3
 800211a:	d302      	bcc.n	8002122 <xQueueGenericSendFromISR+0xc2>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d12f      	bne.n	8002182 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002124:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002128:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800212c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800212e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002138:	f000 f912 	bl	8002360 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800213c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002144:	d112      	bne.n	800216c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214a:	2b00      	cmp	r3, #0
 800214c:	d016      	beq.n	800217c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800214e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002150:	3324      	adds	r3, #36	@ 0x24
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fedc 	bl	8002f10 <xTaskRemoveFromEventList>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00e      	beq.n	800217c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00b      	beq.n	800217c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e007      	b.n	800217c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800216c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002170:	3301      	adds	r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	b25a      	sxtb	r2, r3
 8002176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800217c:	2301      	movs	r3, #1
 800217e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002180:	e001      	b.n	8002186 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002182:	2300      	movs	r3, #0
 8002184:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002188:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002190:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002194:	4618      	mov	r0, r3
 8002196:	3740      	adds	r7, #64	@ 0x40
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	@ 0x30
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80021b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10b      	bne.n	80021ce <xQueueReceive+0x32>
	__asm volatile
 80021b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ba:	f383 8811 	msr	BASEPRI, r3
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	623b      	str	r3, [r7, #32]
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	e7fd      	b.n	80021ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d103      	bne.n	80021dc <xQueueReceive+0x40>
 80021d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <xQueueReceive+0x44>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <xQueueReceive+0x46>
 80021e0:	2300      	movs	r3, #0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10b      	bne.n	80021fe <xQueueReceive+0x62>
	__asm volatile
 80021e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ea:	f383 8811 	msr	BASEPRI, r3
 80021ee:	f3bf 8f6f 	isb	sy
 80021f2:	f3bf 8f4f 	dsb	sy
 80021f6:	61fb      	str	r3, [r7, #28]
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	e7fd      	b.n	80021fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021fe:	f001 f847 	bl	8003290 <xTaskGetSchedulerState>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <xQueueReceive+0x72>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <xQueueReceive+0x76>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <xQueueReceive+0x78>
 8002212:	2300      	movs	r3, #0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <xQueueReceive+0x94>
	__asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	61bb      	str	r3, [r7, #24]
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002230:	f001 fd9a 	bl	8003d68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01f      	beq.n	8002280 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002244:	f000 f8f6 	bl	8002434 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224a:	1e5a      	subs	r2, r3, #1
 800224c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00f      	beq.n	8002278 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225a:	3310      	adds	r3, #16
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fe57 	bl	8002f10 <xTaskRemoveFromEventList>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002268:	4b3c      	ldr	r3, [pc, #240]	@ (800235c <xQueueReceive+0x1c0>)
 800226a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002278:	f001 fda8 	bl	8003dcc <vPortExitCritical>
				return pdPASS;
 800227c:	2301      	movs	r3, #1
 800227e:	e069      	b.n	8002354 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002286:	f001 fda1 	bl	8003dcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800228a:	2300      	movs	r3, #0
 800228c:	e062      	b.n	8002354 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800228e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fe9d 	bl	8002fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800229e:	2301      	movs	r3, #1
 80022a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022a2:	f001 fd93 	bl	8003dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022a6:	f000 fc0d 	bl	8002ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022aa:	f001 fd5d 	bl	8003d68 <vPortEnterCritical>
 80022ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ba:	d103      	bne.n	80022c4 <xQueueReceive+0x128>
 80022bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d103      	bne.n	80022da <xQueueReceive+0x13e>
 80022d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022da:	f001 fd77 	bl	8003dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022de:	1d3a      	adds	r2, r7, #4
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fe8c 	bl	8003004 <xTaskCheckForTimeOut>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d123      	bne.n	800233a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022f4:	f000 f916 	bl	8002524 <prvIsQueueEmpty>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d017      	beq.n	800232e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002300:	3324      	adds	r3, #36	@ 0x24
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fdb0 	bl	8002e6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800230c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800230e:	f000 f8b7 	bl	8002480 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002312:	f000 fbe5 	bl	8002ae0 <xTaskResumeAll>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d189      	bne.n	8002230 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800231c:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <xQueueReceive+0x1c0>)
 800231e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	e780      	b.n	8002230 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800232e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002330:	f000 f8a6 	bl	8002480 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002334:	f000 fbd4 	bl	8002ae0 <xTaskResumeAll>
 8002338:	e77a      	b.n	8002230 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800233a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800233c:	f000 f8a0 	bl	8002480 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002340:	f000 fbce 	bl	8002ae0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002344:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002346:	f000 f8ed 	bl	8002524 <prvIsQueueEmpty>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	f43f af6f 	beq.w	8002230 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002352:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002354:	4618      	mov	r0, r3
 8002356:	3730      	adds	r7, #48	@ 0x30
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	e000ed04 	.word	0xe000ed04

08002360 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002374:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10d      	bne.n	800239a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d14d      	bne.n	8002422 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 ff9e 	bl	80032cc <xTaskPriorityDisinherit>
 8002390:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	e043      	b.n	8002422 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d119      	bne.n	80023d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6858      	ldr	r0, [r3, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	461a      	mov	r2, r3
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	f002 f818 	bl	80043e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	441a      	add	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d32b      	bcc.n	8002422 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	e026      	b.n	8002422 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	68d8      	ldr	r0, [r3, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	461a      	mov	r2, r3
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	f001 fffe 	bl	80043e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	425b      	negs	r3, r3
 80023ee:	441a      	add	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d207      	bcs.n	8002410 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	425b      	negs	r3, r3
 800240a:	441a      	add	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d105      	bne.n	8002422 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	3b01      	subs	r3, #1
 8002420:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800242a:	697b      	ldr	r3, [r7, #20]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d018      	beq.n	8002478 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	441a      	add	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	d303      	bcc.n	8002468 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68d9      	ldr	r1, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	461a      	mov	r2, r3
 8002472:	6838      	ldr	r0, [r7, #0]
 8002474:	f001 ffb4 	bl	80043e0 <memcpy>
	}
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002488:	f001 fc6e 	bl	8003d68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002492:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002494:	e011      	b.n	80024ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	2b00      	cmp	r3, #0
 800249c:	d012      	beq.n	80024c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3324      	adds	r3, #36	@ 0x24
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fd34 	bl	8002f10 <xTaskRemoveFromEventList>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80024ae:	f000 fe0d 	bl	80030cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80024ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	dce9      	bgt.n	8002496 <prvUnlockQueue+0x16>
 80024c2:	e000      	b.n	80024c6 <prvUnlockQueue+0x46>
					break;
 80024c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	22ff      	movs	r2, #255	@ 0xff
 80024ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80024ce:	f001 fc7d 	bl	8003dcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80024d2:	f001 fc49 	bl	8003d68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024de:	e011      	b.n	8002504 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d012      	beq.n	800250e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3310      	adds	r3, #16
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fd0f 	bl	8002f10 <xTaskRemoveFromEventList>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80024f8:	f000 fde8 	bl	80030cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80024fc:	7bbb      	ldrb	r3, [r7, #14]
 80024fe:	3b01      	subs	r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002508:	2b00      	cmp	r3, #0
 800250a:	dce9      	bgt.n	80024e0 <prvUnlockQueue+0x60>
 800250c:	e000      	b.n	8002510 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800250e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	22ff      	movs	r2, #255	@ 0xff
 8002514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002518:	f001 fc58 	bl	8003dcc <vPortExitCritical>
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800252c:	f001 fc1c 	bl	8003d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002538:	2301      	movs	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e001      	b.n	8002542 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002542:	f001 fc43 	bl	8003dcc <vPortExitCritical>

	return xReturn;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002558:	f001 fc06 	bl	8003d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002564:	429a      	cmp	r2, r3
 8002566:	d102      	bne.n	800256e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002568:	2301      	movs	r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e001      	b.n	8002572 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002572:	f001 fc2b 	bl	8003dcc <vPortExitCritical>

	return xReturn;
 8002576:	68fb      	ldr	r3, [r7, #12]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	e014      	b.n	80025ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002590:	4a0f      	ldr	r2, [pc, #60]	@ (80025d0 <vQueueAddToRegistry+0x50>)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800259c:	490c      	ldr	r1, [pc, #48]	@ (80025d0 <vQueueAddToRegistry+0x50>)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80025a6:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <vQueueAddToRegistry+0x50>)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80025b2:	e006      	b.n	80025c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3301      	adds	r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b07      	cmp	r3, #7
 80025be:	d9e7      	bls.n	8002590 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	200006fc 	.word	0x200006fc

080025d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80025e4:	f001 fbc0 	bl	8003d68 <vPortEnterCritical>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025ee:	b25b      	sxtb	r3, r3
 80025f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f4:	d103      	bne.n	80025fe <vQueueWaitForMessageRestricted+0x2a>
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002604:	b25b      	sxtb	r3, r3
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d103      	bne.n	8002614 <vQueueWaitForMessageRestricted+0x40>
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002614:	f001 fbda 	bl	8003dcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261c:	2b00      	cmp	r3, #0
 800261e:	d106      	bne.n	800262e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3324      	adds	r3, #36	@ 0x24
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fc45 	bl	8002eb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800262e:	6978      	ldr	r0, [r7, #20]
 8002630:	f7ff ff26 	bl	8002480 <prvUnlockQueue>
	}
 8002634:	bf00      	nop
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08e      	sub	sp, #56	@ 0x38
 8002640:	af04      	add	r7, sp, #16
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800264a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10b      	bne.n	8002668 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	623b      	str	r3, [r7, #32]
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10b      	bne.n	8002686 <xTaskCreateStatic+0x4a>
	__asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	61fb      	str	r3, [r7, #28]
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	e7fd      	b.n	8002682 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002686:	235c      	movs	r3, #92	@ 0x5c
 8002688:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b5c      	cmp	r3, #92	@ 0x5c
 800268e:	d00b      	beq.n	80026a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	61bb      	str	r3, [r7, #24]
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80026a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80026aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01e      	beq.n	80026ee <xTaskCreateStatic+0xb2>
 80026b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01b      	beq.n	80026ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80026c8:	2300      	movs	r3, #0
 80026ca:	9303      	str	r3, [sp, #12]
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	9302      	str	r3, [sp, #8]
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f850 	bl	8002786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026e8:	f000 f8de 	bl	80028a8 <prvAddNewTaskToReadyList>
 80026ec:	e001      	b.n	80026f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80026f2:	697b      	ldr	r3, [r7, #20]
	}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3728      	adds	r7, #40	@ 0x28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	@ 0x30
 8002700:	af04      	add	r7, sp, #16
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4618      	mov	r0, r3
 8002712:	f001 fc4b 	bl	8003fac <pvPortMalloc>
 8002716:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00e      	beq.n	800273c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800271e:	205c      	movs	r0, #92	@ 0x5c
 8002720:	f001 fc44 	bl	8003fac <pvPortMalloc>
 8002724:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	631a      	str	r2, [r3, #48]	@ 0x30
 8002732:	e005      	b.n	8002740 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002734:	6978      	ldr	r0, [r7, #20]
 8002736:	f001 fd07 	bl	8004148 <vPortFree>
 800273a:	e001      	b.n	8002740 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d017      	beq.n	8002776 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800274e:	88fa      	ldrh	r2, [r7, #6]
 8002750:	2300      	movs	r3, #0
 8002752:	9303      	str	r3, [sp, #12]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	9302      	str	r3, [sp, #8]
 8002758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f80e 	bl	8002786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800276a:	69f8      	ldr	r0, [r7, #28]
 800276c:	f000 f89c 	bl	80028a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002770:	2301      	movs	r3, #1
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	e002      	b.n	800277c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800277c:	69bb      	ldr	r3, [r7, #24]
	}
 800277e:	4618      	mov	r0, r3
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b088      	sub	sp, #32
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002796:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	461a      	mov	r2, r3
 800279e:	21a5      	movs	r1, #165	@ 0xa5
 80027a0:	f001 fdf2 	bl	8004388 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80027a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027ae:	3b01      	subs	r3, #1
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f023 0307 	bic.w	r3, r3, #7
 80027bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80027c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027cc:	f383 8811 	msr	BASEPRI, r3
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	617b      	str	r3, [r7, #20]
}
 80027da:	bf00      	nop
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01f      	beq.n	8002826 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e012      	b.n	8002812 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4413      	add	r3, r2
 80027f2:	7819      	ldrb	r1, [r3, #0]
 80027f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	3334      	adds	r3, #52	@ 0x34
 80027fc:	460a      	mov	r2, r1
 80027fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d006      	beq.n	800281a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	3301      	adds	r3, #1
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	2b0f      	cmp	r3, #15
 8002816:	d9e9      	bls.n	80027ec <prvInitialiseNewTask+0x66>
 8002818:	e000      	b.n	800281c <prvInitialiseNewTask+0x96>
			{
				break;
 800281a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800281c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002824:	e003      	b.n	800282e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800282e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002830:	2b37      	cmp	r3, #55	@ 0x37
 8002832:	d901      	bls.n	8002838 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002834:	2337      	movs	r3, #55	@ 0x37
 8002836:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800283c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800283e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002842:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002846:	2200      	movs	r2, #0
 8002848:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284c:	3304      	adds	r3, #4
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f966 	bl	8001b20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002856:	3318      	adds	r3, #24
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff f961 	bl	8001b20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800285e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002862:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002866:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800286a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800286e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002872:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002876:	2200      	movs	r2, #0
 8002878:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800287a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	69b8      	ldr	r0, [r7, #24]
 8002888:	f001 f93e 	bl	8003b08 <pxPortInitialiseStack>
 800288c:	4602      	mov	r2, r0
 800288e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002890:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800289a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800289c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800289e:	bf00      	nop
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80028b0:	f001 fa5a 	bl	8003d68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028b4:	4b2d      	ldr	r3, [pc, #180]	@ (800296c <prvAddNewTaskToReadyList+0xc4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	4a2c      	ldr	r2, [pc, #176]	@ (800296c <prvAddNewTaskToReadyList+0xc4>)
 80028bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80028be:	4b2c      	ldr	r3, [pc, #176]	@ (8002970 <prvAddNewTaskToReadyList+0xc8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80028c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002970 <prvAddNewTaskToReadyList+0xc8>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028cc:	4b27      	ldr	r3, [pc, #156]	@ (800296c <prvAddNewTaskToReadyList+0xc4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d110      	bne.n	80028f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80028d4:	f000 fc1e 	bl	8003114 <prvInitialiseTaskLists>
 80028d8:	e00d      	b.n	80028f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80028da:	4b26      	ldr	r3, [pc, #152]	@ (8002974 <prvAddNewTaskToReadyList+0xcc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028e2:	4b23      	ldr	r3, [pc, #140]	@ (8002970 <prvAddNewTaskToReadyList+0xc8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d802      	bhi.n	80028f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002970 <prvAddNewTaskToReadyList+0xc8>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028f6:	4b20      	ldr	r3, [pc, #128]	@ (8002978 <prvAddNewTaskToReadyList+0xd0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3301      	adds	r3, #1
 80028fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002978 <prvAddNewTaskToReadyList+0xd0>)
 80028fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002900:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <prvAddNewTaskToReadyList+0xd0>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <prvAddNewTaskToReadyList+0xd4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d903      	bls.n	800291c <prvAddNewTaskToReadyList+0x74>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	4a18      	ldr	r2, [pc, #96]	@ (800297c <prvAddNewTaskToReadyList+0xd4>)
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4a15      	ldr	r2, [pc, #84]	@ (8002980 <prvAddNewTaskToReadyList+0xd8>)
 800292a:	441a      	add	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f7ff f901 	bl	8001b3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002938:	f001 fa48 	bl	8003dcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800293c:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <prvAddNewTaskToReadyList+0xcc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00e      	beq.n	8002962 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002944:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <prvAddNewTaskToReadyList+0xc8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	429a      	cmp	r2, r3
 8002950:	d207      	bcs.n	8002962 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002952:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <prvAddNewTaskToReadyList+0xdc>)
 8002954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000c10 	.word	0x20000c10
 8002970:	2000073c 	.word	0x2000073c
 8002974:	20000c1c 	.word	0x20000c1c
 8002978:	20000c2c 	.word	0x20000c2c
 800297c:	20000c18 	.word	0x20000c18
 8002980:	20000740 	.word	0x20000740
 8002984:	e000ed04 	.word	0xe000ed04

08002988 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d018      	beq.n	80029cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800299a:	4b14      	ldr	r3, [pc, #80]	@ (80029ec <vTaskDelay+0x64>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <vTaskDelay+0x32>
	__asm volatile
 80029a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	60bb      	str	r3, [r7, #8]
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	e7fd      	b.n	80029b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80029ba:	f000 f883 	bl	8002ac4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029be:	2100      	movs	r1, #0
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fcf3 	bl	80033ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80029c6:	f000 f88b 	bl	8002ae0 <xTaskResumeAll>
 80029ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80029d2:	4b07      	ldr	r3, [pc, #28]	@ (80029f0 <vTaskDelay+0x68>)
 80029d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	f3bf 8f4f 	dsb	sy
 80029de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000c38 	.word	0x20000c38
 80029f0:	e000ed04 	.word	0xe000ed04

080029f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	@ 0x28
 80029f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002a02:	463a      	mov	r2, r7
 8002a04:	1d39      	adds	r1, r7, #4
 8002a06:	f107 0308 	add.w	r3, r7, #8
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f834 	bl	8001a78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002a10:	6839      	ldr	r1, [r7, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	9202      	str	r2, [sp, #8]
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	460a      	mov	r2, r1
 8002a22:	4922      	ldr	r1, [pc, #136]	@ (8002aac <vTaskStartScheduler+0xb8>)
 8002a24:	4822      	ldr	r0, [pc, #136]	@ (8002ab0 <vTaskStartScheduler+0xbc>)
 8002a26:	f7ff fe09 	bl	800263c <xTaskCreateStatic>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4a21      	ldr	r2, [pc, #132]	@ (8002ab4 <vTaskStartScheduler+0xc0>)
 8002a2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002a30:	4b20      	ldr	r3, [pc, #128]	@ (8002ab4 <vTaskStartScheduler+0xc0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	e001      	b.n	8002a42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d102      	bne.n	8002a4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002a48:	f000 fd04 	bl	8003454 <xTimerCreateTimerTask>
 8002a4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d116      	bne.n	8002a82 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	613b      	str	r3, [r7, #16]
}
 8002a66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a68:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <vTaskStartScheduler+0xc4>)
 8002a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a70:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <vTaskStartScheduler+0xc8>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a76:	4b12      	ldr	r3, [pc, #72]	@ (8002ac0 <vTaskStartScheduler+0xcc>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a7c:	f001 f8d0 	bl	8003c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a80:	e00f      	b.n	8002aa2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d10b      	bne.n	8002aa2 <vTaskStartScheduler+0xae>
	__asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	60fb      	str	r3, [r7, #12]
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	e7fd      	b.n	8002a9e <vTaskStartScheduler+0xaa>
}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	08004438 	.word	0x08004438
 8002ab0:	080030e5 	.word	0x080030e5
 8002ab4:	20000c34 	.word	0x20000c34
 8002ab8:	20000c30 	.word	0x20000c30
 8002abc:	20000c1c 	.word	0x20000c1c
 8002ac0:	20000c14 	.word	0x20000c14

08002ac4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002ac8:	4b04      	ldr	r3, [pc, #16]	@ (8002adc <vTaskSuspendAll+0x18>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	4a03      	ldr	r2, [pc, #12]	@ (8002adc <vTaskSuspendAll+0x18>)
 8002ad0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	20000c38 	.word	0x20000c38

08002ae0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002aee:	4b42      	ldr	r3, [pc, #264]	@ (8002bf8 <xTaskResumeAll+0x118>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <xTaskResumeAll+0x2e>
	__asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	603b      	str	r3, [r7, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	e7fd      	b.n	8002b0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b0e:	f001 f92b 	bl	8003d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b12:	4b39      	ldr	r3, [pc, #228]	@ (8002bf8 <xTaskResumeAll+0x118>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	4a37      	ldr	r2, [pc, #220]	@ (8002bf8 <xTaskResumeAll+0x118>)
 8002b1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b1c:	4b36      	ldr	r3, [pc, #216]	@ (8002bf8 <xTaskResumeAll+0x118>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d162      	bne.n	8002bea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b24:	4b35      	ldr	r3, [pc, #212]	@ (8002bfc <xTaskResumeAll+0x11c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d05e      	beq.n	8002bea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b2c:	e02f      	b.n	8002b8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b2e:	4b34      	ldr	r3, [pc, #208]	@ (8002c00 <xTaskResumeAll+0x120>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3318      	adds	r3, #24
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff f85a 	bl	8001bf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3304      	adds	r3, #4
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff f855 	bl	8001bf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c04 <xTaskResumeAll+0x124>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d903      	bls.n	8002b5e <xTaskResumeAll+0x7e>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002c04 <xTaskResumeAll+0x124>)
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4a27      	ldr	r2, [pc, #156]	@ (8002c08 <xTaskResumeAll+0x128>)
 8002b6c:	441a      	add	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3304      	adds	r3, #4
 8002b72:	4619      	mov	r1, r3
 8002b74:	4610      	mov	r0, r2
 8002b76:	f7fe ffe0 	bl	8001b3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b7e:	4b23      	ldr	r3, [pc, #140]	@ (8002c0c <xTaskResumeAll+0x12c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d302      	bcc.n	8002b8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002b88:	4b21      	ldr	r3, [pc, #132]	@ (8002c10 <xTaskResumeAll+0x130>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c00 <xTaskResumeAll+0x120>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1cb      	bne.n	8002b2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b9c:	f000 fb58 	bl	8003250 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c14 <xTaskResumeAll+0x134>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002bac:	f000 f846 	bl	8002c3c <xTaskIncrementTick>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002bb6:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <xTaskResumeAll+0x130>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f1      	bne.n	8002bac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <xTaskResumeAll+0x134>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002bce:	4b10      	ldr	r3, [pc, #64]	@ (8002c10 <xTaskResumeAll+0x130>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002bda:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <xTaskResumeAll+0x138>)
 8002bdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002bea:	f001 f8ef 	bl	8003dcc <vPortExitCritical>

	return xAlreadyYielded;
 8002bee:	68bb      	ldr	r3, [r7, #8]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000c38 	.word	0x20000c38
 8002bfc:	20000c10 	.word	0x20000c10
 8002c00:	20000bd0 	.word	0x20000bd0
 8002c04:	20000c18 	.word	0x20000c18
 8002c08:	20000740 	.word	0x20000740
 8002c0c:	2000073c 	.word	0x2000073c
 8002c10:	20000c24 	.word	0x20000c24
 8002c14:	20000c20 	.word	0x20000c20
 8002c18:	e000ed04 	.word	0xe000ed04

08002c1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002c22:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <xTaskGetTickCount+0x1c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002c28:	687b      	ldr	r3, [r7, #4]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000c14 	.word	0x20000c14

08002c3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c46:	4b4f      	ldr	r3, [pc, #316]	@ (8002d84 <xTaskIncrementTick+0x148>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 8090 	bne.w	8002d70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c50:	4b4d      	ldr	r3, [pc, #308]	@ (8002d88 <xTaskIncrementTick+0x14c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c58:	4a4b      	ldr	r2, [pc, #300]	@ (8002d88 <xTaskIncrementTick+0x14c>)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d121      	bne.n	8002ca8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c64:	4b49      	ldr	r3, [pc, #292]	@ (8002d8c <xTaskIncrementTick+0x150>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	603b      	str	r3, [r7, #0]
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	e7fd      	b.n	8002c82 <xTaskIncrementTick+0x46>
 8002c86:	4b41      	ldr	r3, [pc, #260]	@ (8002d8c <xTaskIncrementTick+0x150>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	4b40      	ldr	r3, [pc, #256]	@ (8002d90 <xTaskIncrementTick+0x154>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a3e      	ldr	r2, [pc, #248]	@ (8002d8c <xTaskIncrementTick+0x150>)
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4a3e      	ldr	r2, [pc, #248]	@ (8002d90 <xTaskIncrementTick+0x154>)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d94 <xTaskIncrementTick+0x158>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	4a3c      	ldr	r2, [pc, #240]	@ (8002d94 <xTaskIncrementTick+0x158>)
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	f000 fad4 	bl	8003250 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8002d98 <xTaskIncrementTick+0x15c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d349      	bcc.n	8002d46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cb2:	4b36      	ldr	r3, [pc, #216]	@ (8002d8c <xTaskIncrementTick+0x150>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cbc:	4b36      	ldr	r3, [pc, #216]	@ (8002d98 <xTaskIncrementTick+0x15c>)
 8002cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc2:	601a      	str	r2, [r3, #0]
					break;
 8002cc4:	e03f      	b.n	8002d46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cc6:	4b31      	ldr	r3, [pc, #196]	@ (8002d8c <xTaskIncrementTick+0x150>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d203      	bcs.n	8002ce6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002cde:	4a2e      	ldr	r2, [pc, #184]	@ (8002d98 <xTaskIncrementTick+0x15c>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ce4:	e02f      	b.n	8002d46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe ff82 	bl	8001bf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	3318      	adds	r3, #24
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe ff79 	bl	8001bf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d06:	4b25      	ldr	r3, [pc, #148]	@ (8002d9c <xTaskIncrementTick+0x160>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d903      	bls.n	8002d16 <xTaskIncrementTick+0xda>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d12:	4a22      	ldr	r2, [pc, #136]	@ (8002d9c <xTaskIncrementTick+0x160>)
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4a1f      	ldr	r2, [pc, #124]	@ (8002da0 <xTaskIncrementTick+0x164>)
 8002d24:	441a      	add	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	f7fe ff04 	bl	8001b3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d36:	4b1b      	ldr	r3, [pc, #108]	@ (8002da4 <xTaskIncrementTick+0x168>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d3b8      	bcc.n	8002cb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002d40:	2301      	movs	r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d44:	e7b5      	b.n	8002cb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d46:	4b17      	ldr	r3, [pc, #92]	@ (8002da4 <xTaskIncrementTick+0x168>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d4c:	4914      	ldr	r1, [pc, #80]	@ (8002da0 <xTaskIncrementTick+0x164>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d901      	bls.n	8002d62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002d62:	4b11      	ldr	r3, [pc, #68]	@ (8002da8 <xTaskIncrementTick+0x16c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e004      	b.n	8002d7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002d70:	4b0e      	ldr	r3, [pc, #56]	@ (8002dac <xTaskIncrementTick+0x170>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	4a0d      	ldr	r2, [pc, #52]	@ (8002dac <xTaskIncrementTick+0x170>)
 8002d78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002d7a:	697b      	ldr	r3, [r7, #20]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000c38 	.word	0x20000c38
 8002d88:	20000c14 	.word	0x20000c14
 8002d8c:	20000bc8 	.word	0x20000bc8
 8002d90:	20000bcc 	.word	0x20000bcc
 8002d94:	20000c28 	.word	0x20000c28
 8002d98:	20000c30 	.word	0x20000c30
 8002d9c:	20000c18 	.word	0x20000c18
 8002da0:	20000740 	.word	0x20000740
 8002da4:	2000073c 	.word	0x2000073c
 8002da8:	20000c24 	.word	0x20000c24
 8002dac:	20000c20 	.word	0x20000c20

08002db0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002db6:	4b28      	ldr	r3, [pc, #160]	@ (8002e58 <vTaskSwitchContext+0xa8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002dbe:	4b27      	ldr	r3, [pc, #156]	@ (8002e5c <vTaskSwitchContext+0xac>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002dc4:	e042      	b.n	8002e4c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002dc6:	4b25      	ldr	r3, [pc, #148]	@ (8002e5c <vTaskSwitchContext+0xac>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dcc:	4b24      	ldr	r3, [pc, #144]	@ (8002e60 <vTaskSwitchContext+0xb0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e011      	b.n	8002df8 <vTaskSwitchContext+0x48>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <vTaskSwitchContext+0x42>
	__asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	607b      	str	r3, [r7, #4]
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	e7fd      	b.n	8002dee <vTaskSwitchContext+0x3e>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	491a      	ldr	r1, [pc, #104]	@ (8002e64 <vTaskSwitchContext+0xb4>)
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0e3      	beq.n	8002dd4 <vTaskSwitchContext+0x24>
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4a13      	ldr	r2, [pc, #76]	@ (8002e64 <vTaskSwitchContext+0xb4>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d104      	bne.n	8002e3c <vTaskSwitchContext+0x8c>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	4a09      	ldr	r2, [pc, #36]	@ (8002e68 <vTaskSwitchContext+0xb8>)
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4a06      	ldr	r2, [pc, #24]	@ (8002e60 <vTaskSwitchContext+0xb0>)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	20000c38 	.word	0x20000c38
 8002e5c:	20000c24 	.word	0x20000c24
 8002e60:	20000c18 	.word	0x20000c18
 8002e64:	20000740 	.word	0x20000740
 8002e68:	2000073c 	.word	0x2000073c

08002e6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	60fb      	str	r3, [r7, #12]
}
 8002e8e:	bf00      	nop
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e94:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <vTaskPlaceOnEventList+0x48>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3318      	adds	r3, #24
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7fe fe70 	bl	8001b82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	6838      	ldr	r0, [r7, #0]
 8002ea6:	f000 fa81 	bl	80033ac <prvAddCurrentTaskToDelayedList>
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	2000073c 	.word	0x2000073c

08002eb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10b      	bne.n	8002ee2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	617b      	str	r3, [r7, #20]
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	e7fd      	b.n	8002ede <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <vTaskPlaceOnEventListRestricted+0x54>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3318      	adds	r3, #24
 8002ee8:	4619      	mov	r1, r3
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f7fe fe25 	bl	8001b3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8002efa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	68b8      	ldr	r0, [r7, #8]
 8002f00:	f000 fa54 	bl	80033ac <prvAddCurrentTaskToDelayedList>
	}
 8002f04:	bf00      	nop
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	2000073c 	.word	0x2000073c

08002f10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	60fb      	str	r3, [r7, #12]
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	e7fd      	b.n	8002f3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	3318      	adds	r3, #24
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe fe56 	bl	8001bf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f48:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc0 <xTaskRemoveFromEventList+0xb0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d11d      	bne.n	8002f8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fe4d 	bl	8001bf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5e:	4b19      	ldr	r3, [pc, #100]	@ (8002fc4 <xTaskRemoveFromEventList+0xb4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d903      	bls.n	8002f6e <xTaskRemoveFromEventList+0x5e>
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6a:	4a16      	ldr	r2, [pc, #88]	@ (8002fc4 <xTaskRemoveFromEventList+0xb4>)
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4a13      	ldr	r2, [pc, #76]	@ (8002fc8 <xTaskRemoveFromEventList+0xb8>)
 8002f7c:	441a      	add	r2, r3
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	3304      	adds	r3, #4
 8002f82:	4619      	mov	r1, r3
 8002f84:	4610      	mov	r0, r2
 8002f86:	f7fe fdd8 	bl	8001b3a <vListInsertEnd>
 8002f8a:	e005      	b.n	8002f98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	3318      	adds	r3, #24
 8002f90:	4619      	mov	r1, r3
 8002f92:	480e      	ldr	r0, [pc, #56]	@ (8002fcc <xTaskRemoveFromEventList+0xbc>)
 8002f94:	f7fe fdd1 	bl	8001b3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <xTaskRemoveFromEventList+0xc0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d905      	bls.n	8002fb2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <xTaskRemoveFromEventList+0xc4>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e001      	b.n	8002fb6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002fb6:	697b      	ldr	r3, [r7, #20]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000c38 	.word	0x20000c38
 8002fc4:	20000c18 	.word	0x20000c18
 8002fc8:	20000740 	.word	0x20000740
 8002fcc:	20000bd0 	.word	0x20000bd0
 8002fd0:	2000073c 	.word	0x2000073c
 8002fd4:	20000c24 	.word	0x20000c24

08002fd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <vTaskInternalSetTimeOutState+0x24>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002fe8:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <vTaskInternalSetTimeOutState+0x28>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	605a      	str	r2, [r3, #4]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	20000c28 	.word	0x20000c28
 8003000:	20000c14 	.word	0x20000c14

08003004 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10b      	bne.n	800302c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	613b      	str	r3, [r7, #16]
}
 8003026:	bf00      	nop
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	60fb      	str	r3, [r7, #12]
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	e7fd      	b.n	8003046 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800304a:	f000 fe8d 	bl	8003d68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800304e:	4b1d      	ldr	r3, [pc, #116]	@ (80030c4 <xTaskCheckForTimeOut+0xc0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d102      	bne.n	800306e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	e023      	b.n	80030b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4b15      	ldr	r3, [pc, #84]	@ (80030c8 <xTaskCheckForTimeOut+0xc4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d007      	beq.n	800308a <xTaskCheckForTimeOut+0x86>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	429a      	cmp	r2, r3
 8003082:	d302      	bcc.n	800308a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003084:	2301      	movs	r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	e015      	b.n	80030b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	429a      	cmp	r2, r3
 8003092:	d20b      	bcs.n	80030ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	1ad2      	subs	r2, r2, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ff99 	bl	8002fd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e004      	b.n	80030b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80030b2:	2301      	movs	r3, #1
 80030b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80030b6:	f000 fe89 	bl	8003dcc <vPortExitCritical>

	return xReturn;
 80030ba:	69fb      	ldr	r3, [r7, #28]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000c14 	.word	0x20000c14
 80030c8:	20000c28 	.word	0x20000c28

080030cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80030d0:	4b03      	ldr	r3, [pc, #12]	@ (80030e0 <vTaskMissedYield+0x14>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
}
 80030d6:	bf00      	nop
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	20000c24 	.word	0x20000c24

080030e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030ec:	f000 f852 	bl	8003194 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030f0:	4b06      	ldr	r3, [pc, #24]	@ (800310c <prvIdleTask+0x28>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d9f9      	bls.n	80030ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80030f8:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <prvIdleTask+0x2c>)
 80030fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003108:	e7f0      	b.n	80030ec <prvIdleTask+0x8>
 800310a:	bf00      	nop
 800310c:	20000740 	.word	0x20000740
 8003110:	e000ed04 	.word	0xe000ed04

08003114 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	e00c      	b.n	800313a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4a12      	ldr	r2, [pc, #72]	@ (8003174 <prvInitialiseTaskLists+0x60>)
 800312c:	4413      	add	r3, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fcd6 	bl	8001ae0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3301      	adds	r3, #1
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b37      	cmp	r3, #55	@ 0x37
 800313e:	d9ef      	bls.n	8003120 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003140:	480d      	ldr	r0, [pc, #52]	@ (8003178 <prvInitialiseTaskLists+0x64>)
 8003142:	f7fe fccd 	bl	8001ae0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003146:	480d      	ldr	r0, [pc, #52]	@ (800317c <prvInitialiseTaskLists+0x68>)
 8003148:	f7fe fcca 	bl	8001ae0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800314c:	480c      	ldr	r0, [pc, #48]	@ (8003180 <prvInitialiseTaskLists+0x6c>)
 800314e:	f7fe fcc7 	bl	8001ae0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003152:	480c      	ldr	r0, [pc, #48]	@ (8003184 <prvInitialiseTaskLists+0x70>)
 8003154:	f7fe fcc4 	bl	8001ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003158:	480b      	ldr	r0, [pc, #44]	@ (8003188 <prvInitialiseTaskLists+0x74>)
 800315a:	f7fe fcc1 	bl	8001ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800315e:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <prvInitialiseTaskLists+0x78>)
 8003160:	4a05      	ldr	r2, [pc, #20]	@ (8003178 <prvInitialiseTaskLists+0x64>)
 8003162:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003164:	4b0a      	ldr	r3, [pc, #40]	@ (8003190 <prvInitialiseTaskLists+0x7c>)
 8003166:	4a05      	ldr	r2, [pc, #20]	@ (800317c <prvInitialiseTaskLists+0x68>)
 8003168:	601a      	str	r2, [r3, #0]
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000740 	.word	0x20000740
 8003178:	20000ba0 	.word	0x20000ba0
 800317c:	20000bb4 	.word	0x20000bb4
 8003180:	20000bd0 	.word	0x20000bd0
 8003184:	20000be4 	.word	0x20000be4
 8003188:	20000bfc 	.word	0x20000bfc
 800318c:	20000bc8 	.word	0x20000bc8
 8003190:	20000bcc 	.word	0x20000bcc

08003194 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800319a:	e019      	b.n	80031d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800319c:	f000 fde4 	bl	8003d68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a0:	4b10      	ldr	r3, [pc, #64]	@ (80031e4 <prvCheckTasksWaitingTermination+0x50>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3304      	adds	r3, #4
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe fd21 	bl	8001bf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031b2:	4b0d      	ldr	r3, [pc, #52]	@ (80031e8 <prvCheckTasksWaitingTermination+0x54>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	4a0b      	ldr	r2, [pc, #44]	@ (80031e8 <prvCheckTasksWaitingTermination+0x54>)
 80031ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031bc:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <prvCheckTasksWaitingTermination+0x58>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <prvCheckTasksWaitingTermination+0x58>)
 80031c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031c6:	f000 fe01 	bl	8003dcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f810 	bl	80031f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031d0:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <prvCheckTasksWaitingTermination+0x58>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e1      	bne.n	800319c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000be4 	.word	0x20000be4
 80031e8:	20000c10 	.word	0x20000c10
 80031ec:	20000bf8 	.word	0x20000bf8

080031f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d108      	bne.n	8003214 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	4618      	mov	r0, r3
 8003208:	f000 ff9e 	bl	8004148 <vPortFree>
				vPortFree( pxTCB );
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 ff9b 	bl	8004148 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003212:	e019      	b.n	8003248 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800321a:	2b01      	cmp	r3, #1
 800321c:	d103      	bne.n	8003226 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 ff92 	bl	8004148 <vPortFree>
	}
 8003224:	e010      	b.n	8003248 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800322c:	2b02      	cmp	r3, #2
 800322e:	d00b      	beq.n	8003248 <prvDeleteTCB+0x58>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	60fb      	str	r3, [r7, #12]
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	e7fd      	b.n	8003244 <prvDeleteTCB+0x54>
	}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003256:	4b0c      	ldr	r3, [pc, #48]	@ (8003288 <prvResetNextTaskUnblockTime+0x38>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003260:	4b0a      	ldr	r3, [pc, #40]	@ (800328c <prvResetNextTaskUnblockTime+0x3c>)
 8003262:	f04f 32ff 	mov.w	r2, #4294967295
 8003266:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003268:	e008      	b.n	800327c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800326a:	4b07      	ldr	r3, [pc, #28]	@ (8003288 <prvResetNextTaskUnblockTime+0x38>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a04      	ldr	r2, [pc, #16]	@ (800328c <prvResetNextTaskUnblockTime+0x3c>)
 800327a:	6013      	str	r3, [r2, #0]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	20000bc8 	.word	0x20000bc8
 800328c:	20000c30 	.word	0x20000c30

08003290 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003296:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <xTaskGetSchedulerState+0x34>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800329e:	2301      	movs	r3, #1
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	e008      	b.n	80032b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032a4:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <xTaskGetSchedulerState+0x38>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032ac:	2302      	movs	r3, #2
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	e001      	b.n	80032b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80032b6:	687b      	ldr	r3, [r7, #4]
	}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	20000c1c 	.word	0x20000c1c
 80032c8:	20000c38 	.word	0x20000c38

080032cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d058      	beq.n	8003394 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80032e2:	4b2f      	ldr	r3, [pc, #188]	@ (80033a0 <xTaskPriorityDisinherit+0xd4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d00b      	beq.n	8003304 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80032ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f0:	f383 8811 	msr	BASEPRI, r3
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	60fb      	str	r3, [r7, #12]
}
 80032fe:	bf00      	nop
 8003300:	bf00      	nop
 8003302:	e7fd      	b.n	8003300 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	60bb      	str	r3, [r7, #8]
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003328:	1e5a      	subs	r2, r3, #1
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003336:	429a      	cmp	r2, r3
 8003338:	d02c      	beq.n	8003394 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333e:	2b00      	cmp	r3, #0
 8003340:	d128      	bne.n	8003394 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	3304      	adds	r3, #4
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe fc54 	bl	8001bf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003364:	4b0f      	ldr	r3, [pc, #60]	@ (80033a4 <xTaskPriorityDisinherit+0xd8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d903      	bls.n	8003374 <xTaskPriorityDisinherit+0xa8>
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003370:	4a0c      	ldr	r2, [pc, #48]	@ (80033a4 <xTaskPriorityDisinherit+0xd8>)
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4a09      	ldr	r2, [pc, #36]	@ (80033a8 <xTaskPriorityDisinherit+0xdc>)
 8003382:	441a      	add	r2, r3
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f7fe fbd5 	bl	8001b3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003390:	2301      	movs	r3, #1
 8003392:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003394:	697b      	ldr	r3, [r7, #20]
	}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	2000073c 	.word	0x2000073c
 80033a4:	20000c18 	.word	0x20000c18
 80033a8:	20000740 	.word	0x20000740

080033ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80033b6:	4b21      	ldr	r3, [pc, #132]	@ (800343c <prvAddCurrentTaskToDelayedList+0x90>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033bc:	4b20      	ldr	r3, [pc, #128]	@ (8003440 <prvAddCurrentTaskToDelayedList+0x94>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3304      	adds	r3, #4
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fc16 	bl	8001bf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d10a      	bne.n	80033e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003440 <prvAddCurrentTaskToDelayedList+0x94>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3304      	adds	r3, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	4819      	ldr	r0, [pc, #100]	@ (8003444 <prvAddCurrentTaskToDelayedList+0x98>)
 80033e0:	f7fe fbab 	bl	8001b3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033e4:	e026      	b.n	8003434 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4413      	add	r3, r2
 80033ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033ee:	4b14      	ldr	r3, [pc, #80]	@ (8003440 <prvAddCurrentTaskToDelayedList+0x94>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d209      	bcs.n	8003412 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033fe:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b0f      	ldr	r3, [pc, #60]	@ (8003440 <prvAddCurrentTaskToDelayedList+0x94>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f7fe fbb9 	bl	8001b82 <vListInsert>
}
 8003410:	e010      	b.n	8003434 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003412:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <prvAddCurrentTaskToDelayedList+0x94>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f7fe fbaf 	bl	8001b82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003424:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	d202      	bcs.n	8003434 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800342e:	4a08      	ldr	r2, [pc, #32]	@ (8003450 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	6013      	str	r3, [r2, #0]
}
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000c14 	.word	0x20000c14
 8003440:	2000073c 	.word	0x2000073c
 8003444:	20000bfc 	.word	0x20000bfc
 8003448:	20000bcc 	.word	0x20000bcc
 800344c:	20000bc8 	.word	0x20000bc8
 8003450:	20000c30 	.word	0x20000c30

08003454 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	@ 0x28
 8003458:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800345e:	f000 fb13 	bl	8003a88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003462:	4b1d      	ldr	r3, [pc, #116]	@ (80034d8 <xTimerCreateTimerTask+0x84>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d021      	beq.n	80034ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003472:	1d3a      	adds	r2, r7, #4
 8003474:	f107 0108 	add.w	r1, r7, #8
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	4618      	mov	r0, r3
 800347e:	f7fe fb15 	bl	8001aac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	9202      	str	r2, [sp, #8]
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	2302      	movs	r3, #2
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2300      	movs	r3, #0
 8003492:	460a      	mov	r2, r1
 8003494:	4911      	ldr	r1, [pc, #68]	@ (80034dc <xTimerCreateTimerTask+0x88>)
 8003496:	4812      	ldr	r0, [pc, #72]	@ (80034e0 <xTimerCreateTimerTask+0x8c>)
 8003498:	f7ff f8d0 	bl	800263c <xTaskCreateStatic>
 800349c:	4603      	mov	r3, r0
 800349e:	4a11      	ldr	r2, [pc, #68]	@ (80034e4 <xTimerCreateTimerTask+0x90>)
 80034a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80034a2:	4b10      	ldr	r3, [pc, #64]	@ (80034e4 <xTimerCreateTimerTask+0x90>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80034aa:	2301      	movs	r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10b      	bne.n	80034cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	613b      	str	r3, [r7, #16]
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	e7fd      	b.n	80034c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80034cc:	697b      	ldr	r3, [r7, #20]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000c6c 	.word	0x20000c6c
 80034dc:	08004440 	.word	0x08004440
 80034e0:	08003621 	.word	0x08003621
 80034e4:	20000c70 	.word	0x20000c70

080034e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	@ 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <xTimerGenericCommand+0x30>
	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	623b      	str	r3, [r7, #32]
}
 8003512:	bf00      	nop
 8003514:	bf00      	nop
 8003516:	e7fd      	b.n	8003514 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003518:	4b19      	ldr	r3, [pc, #100]	@ (8003580 <xTimerGenericCommand+0x98>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d02a      	beq.n	8003576 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b05      	cmp	r3, #5
 8003530:	dc18      	bgt.n	8003564 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003532:	f7ff fead 	bl	8003290 <xTaskGetSchedulerState>
 8003536:	4603      	mov	r3, r0
 8003538:	2b02      	cmp	r3, #2
 800353a:	d109      	bne.n	8003550 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800353c:	4b10      	ldr	r3, [pc, #64]	@ (8003580 <xTimerGenericCommand+0x98>)
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	f107 0110 	add.w	r1, r7, #16
 8003544:	2300      	movs	r3, #0
 8003546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003548:	f7fe fc88 	bl	8001e5c <xQueueGenericSend>
 800354c:	6278      	str	r0, [r7, #36]	@ 0x24
 800354e:	e012      	b.n	8003576 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003550:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <xTimerGenericCommand+0x98>)
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	f107 0110 	add.w	r1, r7, #16
 8003558:	2300      	movs	r3, #0
 800355a:	2200      	movs	r2, #0
 800355c:	f7fe fc7e 	bl	8001e5c <xQueueGenericSend>
 8003560:	6278      	str	r0, [r7, #36]	@ 0x24
 8003562:	e008      	b.n	8003576 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003564:	4b06      	ldr	r3, [pc, #24]	@ (8003580 <xTimerGenericCommand+0x98>)
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	f107 0110 	add.w	r1, r7, #16
 800356c:	2300      	movs	r3, #0
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	f7fe fd76 	bl	8002060 <xQueueGenericSendFromISR>
 8003574:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003578:	4618      	mov	r0, r3
 800357a:	3728      	adds	r7, #40	@ 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000c6c 	.word	0x20000c6c

08003584 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af02      	add	r7, sp, #8
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800358e:	4b23      	ldr	r3, [pc, #140]	@ (800361c <prvProcessExpiredTimer+0x98>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3304      	adds	r3, #4
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe fb29 	bl	8001bf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d023      	beq.n	80035f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	18d1      	adds	r1, r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	6978      	ldr	r0, [r7, #20]
 80035be:	f000 f8d5 	bl	800376c <prvInsertTimerInActiveList>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80035c8:	2300      	movs	r3, #0
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	2100      	movs	r1, #0
 80035d2:	6978      	ldr	r0, [r7, #20]
 80035d4:	f7ff ff88 	bl	80034e8 <xTimerGenericCommand>
 80035d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d114      	bne.n	800360a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	60fb      	str	r3, [r7, #12]
}
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	e7fd      	b.n	80035f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	b2da      	uxtb	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	6978      	ldr	r0, [r7, #20]
 8003610:	4798      	blx	r3
}
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000c64 	.word	0x20000c64

08003620 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003628:	f107 0308 	add.w	r3, r7, #8
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f859 	bl	80036e4 <prvGetNextExpireTime>
 8003632:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4619      	mov	r1, r3
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f805 	bl	8003648 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800363e:	f000 f8d7 	bl	80037f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003642:	bf00      	nop
 8003644:	e7f0      	b.n	8003628 <prvTimerTask+0x8>
	...

08003648 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003652:	f7ff fa37 	bl	8002ac4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003656:	f107 0308 	add.w	r3, r7, #8
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f866 	bl	800372c <prvSampleTimeNow>
 8003660:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d130      	bne.n	80036ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <prvProcessTimerOrBlockTask+0x3c>
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	429a      	cmp	r2, r3
 8003674:	d806      	bhi.n	8003684 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003676:	f7ff fa33 	bl	8002ae0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ff81 	bl	8003584 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003682:	e024      	b.n	80036ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800368a:	4b13      	ldr	r3, [pc, #76]	@ (80036d8 <prvProcessTimerOrBlockTask+0x90>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <prvProcessTimerOrBlockTask+0x50>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <prvProcessTimerOrBlockTask+0x52>
 8003698:	2300      	movs	r3, #0
 800369a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800369c:	4b0f      	ldr	r3, [pc, #60]	@ (80036dc <prvProcessTimerOrBlockTask+0x94>)
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	4619      	mov	r1, r3
 80036aa:	f7fe ff93 	bl	80025d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80036ae:	f7ff fa17 	bl	8002ae0 <xTaskResumeAll>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80036b8:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <prvProcessTimerOrBlockTask+0x98>)
 80036ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	f3bf 8f6f 	isb	sy
}
 80036c8:	e001      	b.n	80036ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80036ca:	f7ff fa09 	bl	8002ae0 <xTaskResumeAll>
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000c68 	.word	0x20000c68
 80036dc:	20000c6c 	.word	0x20000c6c
 80036e0:	e000ed04 	.word	0xe000ed04

080036e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80036ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003728 <prvGetNextExpireTime+0x44>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <prvGetNextExpireTime+0x16>
 80036f6:	2201      	movs	r2, #1
 80036f8:	e000      	b.n	80036fc <prvGetNextExpireTime+0x18>
 80036fa:	2200      	movs	r2, #0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003708:	4b07      	ldr	r3, [pc, #28]	@ (8003728 <prvGetNextExpireTime+0x44>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	e001      	b.n	8003718 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003718:	68fb      	ldr	r3, [r7, #12]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000c64 	.word	0x20000c64

0800372c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003734:	f7ff fa72 	bl	8002c1c <xTaskGetTickCount>
 8003738:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800373a:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <prvSampleTimeNow+0x3c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	429a      	cmp	r2, r3
 8003742:	d205      	bcs.n	8003750 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003744:	f000 f93a 	bl	80039bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	e002      	b.n	8003756 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003756:	4a04      	ldr	r2, [pc, #16]	@ (8003768 <prvSampleTimeNow+0x3c>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800375c:	68fb      	ldr	r3, [r7, #12]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000c74 	.word	0x20000c74

0800376c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	429a      	cmp	r2, r3
 8003790:	d812      	bhi.n	80037b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	1ad2      	subs	r2, r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	429a      	cmp	r2, r3
 800379e:	d302      	bcc.n	80037a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80037a0:	2301      	movs	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e01b      	b.n	80037de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80037a6:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <prvInsertTimerInActiveList+0x7c>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3304      	adds	r3, #4
 80037ae:	4619      	mov	r1, r3
 80037b0:	4610      	mov	r0, r2
 80037b2:	f7fe f9e6 	bl	8001b82 <vListInsert>
 80037b6:	e012      	b.n	80037de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d206      	bcs.n	80037ce <prvInsertTimerInActiveList+0x62>
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d302      	bcc.n	80037ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80037c8:	2301      	movs	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e007      	b.n	80037de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80037ce:	4b07      	ldr	r3, [pc, #28]	@ (80037ec <prvInsertTimerInActiveList+0x80>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f7fe f9d2 	bl	8001b82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80037de:	697b      	ldr	r3, [r7, #20]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000c68 	.word	0x20000c68
 80037ec:	20000c64 	.word	0x20000c64

080037f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08e      	sub	sp, #56	@ 0x38
 80037f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037f6:	e0ce      	b.n	8003996 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da19      	bge.n	8003832 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80037fe:	1d3b      	adds	r3, r7, #4
 8003800:	3304      	adds	r3, #4
 8003802:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10b      	bne.n	8003822 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	61fb      	str	r3, [r7, #28]
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	e7fd      	b.n	800381e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003828:	6850      	ldr	r0, [r2, #4]
 800382a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	4611      	mov	r1, r2
 8003830:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f2c0 80ae 	blt.w	8003996 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003848:	3304      	adds	r3, #4
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe f9d2 	bl	8001bf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003850:	463b      	mov	r3, r7
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff ff6a 	bl	800372c <prvSampleTimeNow>
 8003858:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b09      	cmp	r3, #9
 800385e:	f200 8097 	bhi.w	8003990 <prvProcessReceivedCommands+0x1a0>
 8003862:	a201      	add	r2, pc, #4	@ (adr r2, 8003868 <prvProcessReceivedCommands+0x78>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	08003891 	.word	0x08003891
 800386c:	08003891 	.word	0x08003891
 8003870:	08003891 	.word	0x08003891
 8003874:	08003907 	.word	0x08003907
 8003878:	0800391b 	.word	0x0800391b
 800387c:	08003967 	.word	0x08003967
 8003880:	08003891 	.word	0x08003891
 8003884:	08003891 	.word	0x08003891
 8003888:	08003907 	.word	0x08003907
 800388c:	0800391b 	.word	0x0800391b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003892:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	b2da      	uxtb	r2, r3
 800389c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	18d1      	adds	r1, r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038b0:	f7ff ff5c 	bl	800376c <prvInsertTimerInActiveList>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d06c      	beq.n	8003994 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d061      	beq.n	8003994 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	441a      	add	r2, r3
 80038d8:	2300      	movs	r3, #0
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	2300      	movs	r3, #0
 80038de:	2100      	movs	r1, #0
 80038e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038e2:	f7ff fe01 	bl	80034e8 <xTimerGenericCommand>
 80038e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d152      	bne.n	8003994 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	61bb      	str	r3, [r7, #24]
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	e7fd      	b.n	8003902 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	b2da      	uxtb	r2, r3
 8003912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003914:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003918:	e03d      	b.n	8003996 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800391a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	b2da      	uxtb	r2, r3
 8003926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003928:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003930:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10b      	bne.n	8003952 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	617b      	str	r3, [r7, #20]
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	e7fd      	b.n	800394e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	18d1      	adds	r1, r2, r3
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003960:	f7ff ff04 	bl	800376c <prvInsertTimerInActiveList>
					break;
 8003964:	e017      	b.n	8003996 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003968:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d103      	bne.n	800397c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003976:	f000 fbe7 	bl	8004148 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800397a:	e00c      	b.n	8003996 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	b2da      	uxtb	r2, r3
 8003988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800398e:	e002      	b.n	8003996 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <prvProcessReceivedCommands+0x1a6>
					break;
 8003994:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003996:	4b08      	ldr	r3, [pc, #32]	@ (80039b8 <prvProcessReceivedCommands+0x1c8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	1d39      	adds	r1, r7, #4
 800399c:	2200      	movs	r2, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fbfc 	bl	800219c <xQueueReceive>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f47f af26 	bne.w	80037f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3730      	adds	r7, #48	@ 0x30
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000c6c 	.word	0x20000c6c

080039bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039c2:	e049      	b.n	8003a58 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a80 <prvSwitchTimerLists+0xc4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003a80 <prvSwitchTimerLists+0xc4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3304      	adds	r3, #4
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe f909 	bl	8001bf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d02f      	beq.n	8003a58 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d90e      	bls.n	8003a28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a16:	4b1a      	ldr	r3, [pc, #104]	@ (8003a80 <prvSwitchTimerLists+0xc4>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4610      	mov	r0, r2
 8003a22:	f7fe f8ae 	bl	8001b82 <vListInsert>
 8003a26:	e017      	b.n	8003a58 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	2100      	movs	r1, #0
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7ff fd58 	bl	80034e8 <xTimerGenericCommand>
 8003a38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	603b      	str	r3, [r7, #0]
}
 8003a52:	bf00      	nop
 8003a54:	bf00      	nop
 8003a56:	e7fd      	b.n	8003a54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a58:	4b09      	ldr	r3, [pc, #36]	@ (8003a80 <prvSwitchTimerLists+0xc4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1b0      	bne.n	80039c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003a62:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <prvSwitchTimerLists+0xc4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003a68:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <prvSwitchTimerLists+0xc8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <prvSwitchTimerLists+0xc4>)
 8003a6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003a70:	4a04      	ldr	r2, [pc, #16]	@ (8003a84 <prvSwitchTimerLists+0xc8>)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	6013      	str	r3, [r2, #0]
}
 8003a76:	bf00      	nop
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000c64 	.word	0x20000c64
 8003a84:	20000c68 	.word	0x20000c68

08003a88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003a8e:	f000 f96b 	bl	8003d68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003a92:	4b15      	ldr	r3, [pc, #84]	@ (8003ae8 <prvCheckForValidListAndQueue+0x60>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d120      	bne.n	8003adc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003a9a:	4814      	ldr	r0, [pc, #80]	@ (8003aec <prvCheckForValidListAndQueue+0x64>)
 8003a9c:	f7fe f820 	bl	8001ae0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003aa0:	4813      	ldr	r0, [pc, #76]	@ (8003af0 <prvCheckForValidListAndQueue+0x68>)
 8003aa2:	f7fe f81d 	bl	8001ae0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003aa6:	4b13      	ldr	r3, [pc, #76]	@ (8003af4 <prvCheckForValidListAndQueue+0x6c>)
 8003aa8:	4a10      	ldr	r2, [pc, #64]	@ (8003aec <prvCheckForValidListAndQueue+0x64>)
 8003aaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003aac:	4b12      	ldr	r3, [pc, #72]	@ (8003af8 <prvCheckForValidListAndQueue+0x70>)
 8003aae:	4a10      	ldr	r2, [pc, #64]	@ (8003af0 <prvCheckForValidListAndQueue+0x68>)
 8003ab0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	4b11      	ldr	r3, [pc, #68]	@ (8003afc <prvCheckForValidListAndQueue+0x74>)
 8003ab8:	4a11      	ldr	r2, [pc, #68]	@ (8003b00 <prvCheckForValidListAndQueue+0x78>)
 8003aba:	2110      	movs	r1, #16
 8003abc:	200a      	movs	r0, #10
 8003abe:	f7fe f92d 	bl	8001d1c <xQueueGenericCreateStatic>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4a08      	ldr	r2, [pc, #32]	@ (8003ae8 <prvCheckForValidListAndQueue+0x60>)
 8003ac6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003ac8:	4b07      	ldr	r3, [pc, #28]	@ (8003ae8 <prvCheckForValidListAndQueue+0x60>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ad0:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <prvCheckForValidListAndQueue+0x60>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	490b      	ldr	r1, [pc, #44]	@ (8003b04 <prvCheckForValidListAndQueue+0x7c>)
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fd52 	bl	8002580 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003adc:	f000 f976 	bl	8003dcc <vPortExitCritical>
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000c6c 	.word	0x20000c6c
 8003aec:	20000c3c 	.word	0x20000c3c
 8003af0:	20000c50 	.word	0x20000c50
 8003af4:	20000c64 	.word	0x20000c64
 8003af8:	20000c68 	.word	0x20000c68
 8003afc:	20000d18 	.word	0x20000d18
 8003b00:	20000c78 	.word	0x20000c78
 8003b04:	08004448 	.word	0x08004448

08003b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3b04      	subs	r3, #4
 8003b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3b04      	subs	r3, #4
 8003b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f023 0201 	bic.w	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3b04      	subs	r3, #4
 8003b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b38:	4a0c      	ldr	r2, [pc, #48]	@ (8003b6c <pxPortInitialiseStack+0x64>)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3b14      	subs	r3, #20
 8003b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3b04      	subs	r3, #4
 8003b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f06f 0202 	mvn.w	r2, #2
 8003b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3b20      	subs	r3, #32
 8003b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	08003b71 	.word	0x08003b71

08003b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b7a:	4b13      	ldr	r3, [pc, #76]	@ (8003bc8 <prvTaskExitError+0x58>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d00b      	beq.n	8003b9c <prvTaskExitError+0x2c>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	60fb      	str	r3, [r7, #12]
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <prvTaskExitError+0x28>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	60bb      	str	r3, [r7, #8]
}
 8003bae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003bb0:	bf00      	nop
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0fc      	beq.n	8003bb2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	2000000c 	.word	0x2000000c
 8003bcc:	00000000 	.word	0x00000000

08003bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003bd0:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <pxCurrentTCBConst2>)
 8003bd2:	6819      	ldr	r1, [r3, #0]
 8003bd4:	6808      	ldr	r0, [r1, #0]
 8003bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bda:	f380 8809 	msr	PSP, r0
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	f380 8811 	msr	BASEPRI, r0
 8003bea:	4770      	bx	lr
 8003bec:	f3af 8000 	nop.w

08003bf0 <pxCurrentTCBConst2>:
 8003bf0:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop

08003bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003bf8:	4808      	ldr	r0, [pc, #32]	@ (8003c1c <prvPortStartFirstTask+0x24>)
 8003bfa:	6800      	ldr	r0, [r0, #0]
 8003bfc:	6800      	ldr	r0, [r0, #0]
 8003bfe:	f380 8808 	msr	MSP, r0
 8003c02:	f04f 0000 	mov.w	r0, #0
 8003c06:	f380 8814 	msr	CONTROL, r0
 8003c0a:	b662      	cpsie	i
 8003c0c:	b661      	cpsie	f
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	df00      	svc	0
 8003c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c1a:	bf00      	nop
 8003c1c:	e000ed08 	.word	0xe000ed08

08003c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c26:	4b47      	ldr	r3, [pc, #284]	@ (8003d44 <xPortStartScheduler+0x124>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a47      	ldr	r2, [pc, #284]	@ (8003d48 <xPortStartScheduler+0x128>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10b      	bne.n	8003c48 <xPortStartScheduler+0x28>
	__asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	613b      	str	r3, [r7, #16]
}
 8003c42:	bf00      	nop
 8003c44:	bf00      	nop
 8003c46:	e7fd      	b.n	8003c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c48:	4b3e      	ldr	r3, [pc, #248]	@ (8003d44 <xPortStartScheduler+0x124>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8003d4c <xPortStartScheduler+0x12c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d10b      	bne.n	8003c6a <xPortStartScheduler+0x4a>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	60fb      	str	r3, [r7, #12]
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	e7fd      	b.n	8003c66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c6a:	4b39      	ldr	r3, [pc, #228]	@ (8003d50 <xPortStartScheduler+0x130>)
 8003c6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	22ff      	movs	r2, #255	@ 0xff
 8003c7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4b31      	ldr	r3, [pc, #196]	@ (8003d54 <xPortStartScheduler+0x134>)
 8003c90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c92:	4b31      	ldr	r3, [pc, #196]	@ (8003d58 <xPortStartScheduler+0x138>)
 8003c94:	2207      	movs	r2, #7
 8003c96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c98:	e009      	b.n	8003cae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d58 <xPortStartScheduler+0x138>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d58 <xPortStartScheduler+0x138>)
 8003ca2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb6:	2b80      	cmp	r3, #128	@ 0x80
 8003cb8:	d0ef      	beq.n	8003c9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cba:	4b27      	ldr	r3, [pc, #156]	@ (8003d58 <xPortStartScheduler+0x138>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f1c3 0307 	rsb	r3, r3, #7
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d00b      	beq.n	8003cde <xPortStartScheduler+0xbe>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	60bb      	str	r3, [r7, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	e7fd      	b.n	8003cda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cde:	4b1e      	ldr	r3, [pc, #120]	@ (8003d58 <xPortStartScheduler+0x138>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d58 <xPortStartScheduler+0x138>)
 8003ce6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <xPortStartScheduler+0x138>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003cf0:	4a19      	ldr	r2, [pc, #100]	@ (8003d58 <xPortStartScheduler+0x138>)
 8003cf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003cfc:	4b17      	ldr	r3, [pc, #92]	@ (8003d5c <xPortStartScheduler+0x13c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a16      	ldr	r2, [pc, #88]	@ (8003d5c <xPortStartScheduler+0x13c>)
 8003d02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d08:	4b14      	ldr	r3, [pc, #80]	@ (8003d5c <xPortStartScheduler+0x13c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a13      	ldr	r2, [pc, #76]	@ (8003d5c <xPortStartScheduler+0x13c>)
 8003d0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003d12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d14:	f000 f8da 	bl	8003ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d18:	4b11      	ldr	r3, [pc, #68]	@ (8003d60 <xPortStartScheduler+0x140>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003d1e:	f000 f8f9 	bl	8003f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d22:	4b10      	ldr	r3, [pc, #64]	@ (8003d64 <xPortStartScheduler+0x144>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a0f      	ldr	r2, [pc, #60]	@ (8003d64 <xPortStartScheduler+0x144>)
 8003d28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003d2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d2e:	f7ff ff63 	bl	8003bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d32:	f7ff f83d 	bl	8002db0 <vTaskSwitchContext>
	prvTaskExitError();
 8003d36:	f7ff ff1b 	bl	8003b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	e000ed00 	.word	0xe000ed00
 8003d48:	410fc271 	.word	0x410fc271
 8003d4c:	410fc270 	.word	0x410fc270
 8003d50:	e000e400 	.word	0xe000e400
 8003d54:	20000d68 	.word	0x20000d68
 8003d58:	20000d6c 	.word	0x20000d6c
 8003d5c:	e000ed20 	.word	0xe000ed20
 8003d60:	2000000c 	.word	0x2000000c
 8003d64:	e000ef34 	.word	0xe000ef34

08003d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	607b      	str	r3, [r7, #4]
}
 8003d80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d82:	4b10      	ldr	r3, [pc, #64]	@ (8003dc4 <vPortEnterCritical+0x5c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3301      	adds	r3, #1
 8003d88:	4a0e      	ldr	r2, [pc, #56]	@ (8003dc4 <vPortEnterCritical+0x5c>)
 8003d8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <vPortEnterCritical+0x5c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d110      	bne.n	8003db6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d94:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <vPortEnterCritical+0x60>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <vPortEnterCritical+0x4e>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	603b      	str	r3, [r7, #0]
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	e7fd      	b.n	8003db2 <vPortEnterCritical+0x4a>
	}
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	2000000c 	.word	0x2000000c
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003dd2:	4b12      	ldr	r3, [pc, #72]	@ (8003e1c <vPortExitCritical+0x50>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10b      	bne.n	8003df2 <vPortExitCritical+0x26>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	607b      	str	r3, [r7, #4]
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	e7fd      	b.n	8003dee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003df2:	4b0a      	ldr	r3, [pc, #40]	@ (8003e1c <vPortExitCritical+0x50>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	4a08      	ldr	r2, [pc, #32]	@ (8003e1c <vPortExitCritical+0x50>)
 8003dfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003dfc:	4b07      	ldr	r3, [pc, #28]	@ (8003e1c <vPortExitCritical+0x50>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <vPortExitCritical+0x44>
 8003e04:	2300      	movs	r3, #0
 8003e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f383 8811 	msr	BASEPRI, r3
}
 8003e0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	2000000c 	.word	0x2000000c

08003e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e20:	f3ef 8009 	mrs	r0, PSP
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	4b15      	ldr	r3, [pc, #84]	@ (8003e80 <pxCurrentTCBConst>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	f01e 0f10 	tst.w	lr, #16
 8003e30:	bf08      	it	eq
 8003e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3a:	6010      	str	r0, [r2, #0]
 8003e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003e44:	f380 8811 	msr	BASEPRI, r0
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f7fe ffae 	bl	8002db0 <vTaskSwitchContext>
 8003e54:	f04f 0000 	mov.w	r0, #0
 8003e58:	f380 8811 	msr	BASEPRI, r0
 8003e5c:	bc09      	pop	{r0, r3}
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	6808      	ldr	r0, [r1, #0]
 8003e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e66:	f01e 0f10 	tst.w	lr, #16
 8003e6a:	bf08      	it	eq
 8003e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e70:	f380 8809 	msr	PSP, r0
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	f3af 8000 	nop.w

08003e80 <pxCurrentTCBConst>:
 8003e80:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop

08003e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	607b      	str	r3, [r7, #4]
}
 8003ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ea2:	f7fe fecb 	bl	8002c3c <xTaskIncrementTick>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003eac:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <xPortSysTickHandler+0x40>)
 8003eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f383 8811 	msr	BASEPRI, r3
}
 8003ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	e000ed04 	.word	0xe000ed04

08003ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <vPortSetupTimerInterrupt+0x34>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <vPortSetupTimerInterrupt+0x38>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003edc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f08 <vPortSetupTimerInterrupt+0x3c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8003f0c <vPortSetupTimerInterrupt+0x40>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	099b      	lsrs	r3, r3, #6
 8003ee8:	4a09      	ldr	r2, [pc, #36]	@ (8003f10 <vPortSetupTimerInterrupt+0x44>)
 8003eea:	3b01      	subs	r3, #1
 8003eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003eee:	4b04      	ldr	r3, [pc, #16]	@ (8003f00 <vPortSetupTimerInterrupt+0x34>)
 8003ef0:	2207      	movs	r2, #7
 8003ef2:	601a      	str	r2, [r3, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	e000e010 	.word	0xe000e010
 8003f04:	e000e018 	.word	0xe000e018
 8003f08:	20000000 	.word	0x20000000
 8003f0c:	10624dd3 	.word	0x10624dd3
 8003f10:	e000e014 	.word	0xe000e014

08003f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003f24 <vPortEnableVFP+0x10>
 8003f18:	6801      	ldr	r1, [r0, #0]
 8003f1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003f1e:	6001      	str	r1, [r0, #0]
 8003f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003f22:	bf00      	nop
 8003f24:	e000ed88 	.word	0xe000ed88

08003f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003f2e:	f3ef 8305 	mrs	r3, IPSR
 8003f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b0f      	cmp	r3, #15
 8003f38:	d915      	bls.n	8003f66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f3a:	4a18      	ldr	r2, [pc, #96]	@ (8003f9c <vPortValidateInterruptPriority+0x74>)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f44:	4b16      	ldr	r3, [pc, #88]	@ (8003fa0 <vPortValidateInterruptPriority+0x78>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	7afa      	ldrb	r2, [r7, #11]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d20b      	bcs.n	8003f66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	607b      	str	r3, [r7, #4]
}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	e7fd      	b.n	8003f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f66:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa4 <vPortValidateInterruptPriority+0x7c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa8 <vPortValidateInterruptPriority+0x80>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d90b      	bls.n	8003f8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	603b      	str	r3, [r7, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	e7fd      	b.n	8003f8a <vPortValidateInterruptPriority+0x62>
	}
 8003f8e:	bf00      	nop
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	e000e3f0 	.word	0xe000e3f0
 8003fa0:	20000d68 	.word	0x20000d68
 8003fa4:	e000ed0c 	.word	0xe000ed0c
 8003fa8:	20000d6c 	.word	0x20000d6c

08003fac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	@ 0x28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003fb8:	f7fe fd84 	bl	8002ac4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8004130 <pvPortMalloc+0x184>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003fc4:	f000 f924 	bl	8004210 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8004134 <pvPortMalloc+0x188>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f040 8095 	bne.w	8004100 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01e      	beq.n	800401a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003fdc:	2208      	movs	r2, #8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d015      	beq.n	800401a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f023 0307 	bic.w	r3, r3, #7
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <pvPortMalloc+0x6e>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	617b      	str	r3, [r7, #20]
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	e7fd      	b.n	8004016 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d06f      	beq.n	8004100 <pvPortMalloc+0x154>
 8004020:	4b45      	ldr	r3, [pc, #276]	@ (8004138 <pvPortMalloc+0x18c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	d86a      	bhi.n	8004100 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800402a:	4b44      	ldr	r3, [pc, #272]	@ (800413c <pvPortMalloc+0x190>)
 800402c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800402e:	4b43      	ldr	r3, [pc, #268]	@ (800413c <pvPortMalloc+0x190>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004034:	e004      	b.n	8004040 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	429a      	cmp	r2, r3
 8004048:	d903      	bls.n	8004052 <pvPortMalloc+0xa6>
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f1      	bne.n	8004036 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004052:	4b37      	ldr	r3, [pc, #220]	@ (8004130 <pvPortMalloc+0x184>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004058:	429a      	cmp	r2, r3
 800405a:	d051      	beq.n	8004100 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2208      	movs	r2, #8
 8004062:	4413      	add	r3, r2
 8004064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	1ad2      	subs	r2, r2, r3
 8004076:	2308      	movs	r3, #8
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	429a      	cmp	r2, r3
 800407c:	d920      	bls.n	80040c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800407e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4413      	add	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <pvPortMalloc+0xfc>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	613b      	str	r3, [r7, #16]
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	1ad2      	subs	r2, r2, r3
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040ba:	69b8      	ldr	r0, [r7, #24]
 80040bc:	f000 f90a 	bl	80042d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004138 <pvPortMalloc+0x18c>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004138 <pvPortMalloc+0x18c>)
 80040cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004138 <pvPortMalloc+0x18c>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <pvPortMalloc+0x194>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d203      	bcs.n	80040e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040da:	4b17      	ldr	r3, [pc, #92]	@ (8004138 <pvPortMalloc+0x18c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a18      	ldr	r2, [pc, #96]	@ (8004140 <pvPortMalloc+0x194>)
 80040e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	4b13      	ldr	r3, [pc, #76]	@ (8004134 <pvPortMalloc+0x188>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80040f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80040f6:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <pvPortMalloc+0x198>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3301      	adds	r3, #1
 80040fc:	4a11      	ldr	r2, [pc, #68]	@ (8004144 <pvPortMalloc+0x198>)
 80040fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004100:	f7fe fcee 	bl	8002ae0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <pvPortMalloc+0x17a>
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	60fb      	str	r3, [r7, #12]
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	e7fd      	b.n	8004122 <pvPortMalloc+0x176>
	return pvReturn;
 8004126:	69fb      	ldr	r3, [r7, #28]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3728      	adds	r7, #40	@ 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20001978 	.word	0x20001978
 8004134:	2000198c 	.word	0x2000198c
 8004138:	2000197c 	.word	0x2000197c
 800413c:	20001970 	.word	0x20001970
 8004140:	20001980 	.word	0x20001980
 8004144:	20001984 	.word	0x20001984

08004148 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d04f      	beq.n	80041fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800415a:	2308      	movs	r3, #8
 800415c:	425b      	negs	r3, r3
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4413      	add	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	4b25      	ldr	r3, [pc, #148]	@ (8004204 <vPortFree+0xbc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <vPortFree+0x46>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	60fb      	str	r3, [r7, #12]
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	e7fd      	b.n	800418a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <vPortFree+0x66>
	__asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	60bb      	str	r3, [r7, #8]
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	e7fd      	b.n	80041aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	4b14      	ldr	r3, [pc, #80]	@ (8004204 <vPortFree+0xbc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01e      	beq.n	80041fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d11a      	bne.n	80041fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004204 <vPortFree+0xbc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	401a      	ands	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80041d4:	f7fe fc76 	bl	8002ac4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004208 <vPortFree+0xc0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4413      	add	r3, r2
 80041e2:	4a09      	ldr	r2, [pc, #36]	@ (8004208 <vPortFree+0xc0>)
 80041e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041e6:	6938      	ldr	r0, [r7, #16]
 80041e8:	f000 f874 	bl	80042d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80041ec:	4b07      	ldr	r3, [pc, #28]	@ (800420c <vPortFree+0xc4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	4a06      	ldr	r2, [pc, #24]	@ (800420c <vPortFree+0xc4>)
 80041f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80041f6:	f7fe fc73 	bl	8002ae0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80041fa:	bf00      	nop
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	2000198c 	.word	0x2000198c
 8004208:	2000197c 	.word	0x2000197c
 800420c:	20001988 	.word	0x20001988

08004210 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004216:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800421a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800421c:	4b27      	ldr	r3, [pc, #156]	@ (80042bc <prvHeapInit+0xac>)
 800421e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3307      	adds	r3, #7
 800422e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0307 	bic.w	r3, r3, #7
 8004236:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	4a1f      	ldr	r2, [pc, #124]	@ (80042bc <prvHeapInit+0xac>)
 8004240:	4413      	add	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004248:	4a1d      	ldr	r2, [pc, #116]	@ (80042c0 <prvHeapInit+0xb0>)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800424e:	4b1c      	ldr	r3, [pc, #112]	@ (80042c0 <prvHeapInit+0xb0>)
 8004250:	2200      	movs	r2, #0
 8004252:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4413      	add	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800425c:	2208      	movs	r2, #8
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0307 	bic.w	r3, r3, #7
 800426a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a15      	ldr	r2, [pc, #84]	@ (80042c4 <prvHeapInit+0xb4>)
 8004270:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004272:	4b14      	ldr	r3, [pc, #80]	@ (80042c4 <prvHeapInit+0xb4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800427a:	4b12      	ldr	r3, [pc, #72]	@ (80042c4 <prvHeapInit+0xb4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	1ad2      	subs	r2, r2, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004290:	4b0c      	ldr	r3, [pc, #48]	@ (80042c4 <prvHeapInit+0xb4>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4a0a      	ldr	r2, [pc, #40]	@ (80042c8 <prvHeapInit+0xb8>)
 800429e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4a09      	ldr	r2, [pc, #36]	@ (80042cc <prvHeapInit+0xbc>)
 80042a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042a8:	4b09      	ldr	r3, [pc, #36]	@ (80042d0 <prvHeapInit+0xc0>)
 80042aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80042ae:	601a      	str	r2, [r3, #0]
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	20000d70 	.word	0x20000d70
 80042c0:	20001970 	.word	0x20001970
 80042c4:	20001978 	.word	0x20001978
 80042c8:	20001980 	.word	0x20001980
 80042cc:	2000197c 	.word	0x2000197c
 80042d0:	2000198c 	.word	0x2000198c

080042d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80042dc:	4b28      	ldr	r3, [pc, #160]	@ (8004380 <prvInsertBlockIntoFreeList+0xac>)
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	e002      	b.n	80042e8 <prvInsertBlockIntoFreeList+0x14>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d8f7      	bhi.n	80042e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4413      	add	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d108      	bne.n	8004316 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	441a      	add	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	441a      	add	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d118      	bne.n	800435c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4b15      	ldr	r3, [pc, #84]	@ (8004384 <prvInsertBlockIntoFreeList+0xb0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d00d      	beq.n	8004352 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	441a      	add	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e008      	b.n	8004364 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004352:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <prvInsertBlockIntoFreeList+0xb0>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e003      	b.n	8004364 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	429a      	cmp	r2, r3
 800436a:	d002      	beq.n	8004372 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20001970 	.word	0x20001970
 8004384:	20001978 	.word	0x20001978

08004388 <memset>:
 8004388:	4402      	add	r2, r0
 800438a:	4603      	mov	r3, r0
 800438c:	4293      	cmp	r3, r2
 800438e:	d100      	bne.n	8004392 <memset+0xa>
 8004390:	4770      	bx	lr
 8004392:	f803 1b01 	strb.w	r1, [r3], #1
 8004396:	e7f9      	b.n	800438c <memset+0x4>

08004398 <__libc_init_array>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	4d0d      	ldr	r5, [pc, #52]	@ (80043d0 <__libc_init_array+0x38>)
 800439c:	4c0d      	ldr	r4, [pc, #52]	@ (80043d4 <__libc_init_array+0x3c>)
 800439e:	1b64      	subs	r4, r4, r5
 80043a0:	10a4      	asrs	r4, r4, #2
 80043a2:	2600      	movs	r6, #0
 80043a4:	42a6      	cmp	r6, r4
 80043a6:	d109      	bne.n	80043bc <__libc_init_array+0x24>
 80043a8:	4d0b      	ldr	r5, [pc, #44]	@ (80043d8 <__libc_init_array+0x40>)
 80043aa:	4c0c      	ldr	r4, [pc, #48]	@ (80043dc <__libc_init_array+0x44>)
 80043ac:	f000 f826 	bl	80043fc <_init>
 80043b0:	1b64      	subs	r4, r4, r5
 80043b2:	10a4      	asrs	r4, r4, #2
 80043b4:	2600      	movs	r6, #0
 80043b6:	42a6      	cmp	r6, r4
 80043b8:	d105      	bne.n	80043c6 <__libc_init_array+0x2e>
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c0:	4798      	blx	r3
 80043c2:	3601      	adds	r6, #1
 80043c4:	e7ee      	b.n	80043a4 <__libc_init_array+0xc>
 80043c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ca:	4798      	blx	r3
 80043cc:	3601      	adds	r6, #1
 80043ce:	e7f2      	b.n	80043b6 <__libc_init_array+0x1e>
 80043d0:	080044cc 	.word	0x080044cc
 80043d4:	080044cc 	.word	0x080044cc
 80043d8:	080044cc 	.word	0x080044cc
 80043dc:	080044d0 	.word	0x080044d0

080043e0 <memcpy>:
 80043e0:	440a      	add	r2, r1
 80043e2:	4291      	cmp	r1, r2
 80043e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043e8:	d100      	bne.n	80043ec <memcpy+0xc>
 80043ea:	4770      	bx	lr
 80043ec:	b510      	push	{r4, lr}
 80043ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043f6:	4291      	cmp	r1, r2
 80043f8:	d1f9      	bne.n	80043ee <memcpy+0xe>
 80043fa:	bd10      	pop	{r4, pc}

080043fc <_init>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr

08004408 <_fini>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	bf00      	nop
 800440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440e:	bc08      	pop	{r3}
 8004410:	469e      	mov	lr, r3
 8004412:	4770      	bx	lr
